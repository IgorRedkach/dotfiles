#!/bin/bash
export DOCKER_REPO=jmutai

dock () {
   sudo systemctl restart docker
   sudo systemctl start httpd
} 

images_backup () {
    docker images | grep -v REPOSITORY | awk '{print $1}' \
        | xargs -d "\n" -I {} docker save {} -o docker-images/{}.tar
}

clean_btrfs () {
   sudo  btrfs subvolume delete  /var/lib/docker/btrfs/subvolumes/*
}
dock_full_clean () {
    sudo systemctl stop docker.service
    sudo systemctl stop docker.socket
    sudo rm -rf /var/lib/docker/
    sudo btrfs subvolume list /var/lib/docker|awk '/ID/ {print "/"$9}'|xargs btrfs sub delete
}

nodock () {
   sudo systemctl stop  docker
} 

dockpid (){
docker inspect -f "{{ .State.Pid }}" $1
}

# Delete stopped container
cont_del () {
    local cont_name="$1"
    #local cont_state=`docker inspect --format "{{.State.Running}}" "$cont_name" 2>/dev/null`
    #if [[ "$state" == "false" ]]; then
    docker rm "$cont_name"
#fi
}

# Clean docker environment
dockclean () {
    docker ps -aq | xargs -r docker rm  
    docker ps --filter status=exited -q 2>/dev/null | xargs -r docker rm 
    docker images --filter dangling=true -q 2>/dev/null | xargs -r docker rmi  
    docker volume ls -qf dangling=true | xargs -r docker volume rm 

    # remove unused images:
    docker images --no-trunc | grep '<none>' | awk '{ print $3 }' | xargs -r docker rmi
 
    # remove unused volumes:
    #sudo find '/var/lib/docker/volumes/' -mindepth 1 -maxdepth 1 -type d | grep -vFf <(
    #sudo docker ps -aq | xargs docker inspect | jq -r '.[] | .Mounts | .[] | .Name | select(.)') | xargs -r rm -fr

#sh ~/dockerfiles/docker-clean/docker-clean
}

# Delete images with none repo name
imgrem () {
    docker images | grep "^<none>" | awk '{print $3}' | xargs -I {} docker rmi {}
}

# Get docker container ip address
dockip () {
    local cont=${1:-}
    if [ -n "$cont" ]; then
        docker inspect --format "{{.NetworkSettings.Networks.bridge.IPAddress}}" ${cont}
    else
        echo ""
        echo "Provide container name"
    fi
}

# Function to remove running containers
dockstop_all () {
    echo ""
    docker ps -qa | xargs -I {} docker stop {}
}

dockstop () {
    docker stop "$1" 2>/dev/null
}


# Dump all sql databases on dabase container
dockdumpsql () {
    docker exec some-mariadb sh -c 'exec mysqldump --all-databases -uroot -p"$MYSQL_ROOT_PASSWORD"' > /some/path/on/your/host/all-databases.sql
}
# Caddy web server alpine based container
caddy () {
    cont_del caddy 2>/dev/null
    docker run  \
    -p 80:80 \
    -p 443:443 \
    -v /srv/http/jmutai:/www/html/ \
    --name caddy \
    jmutai/caddy  "$@"
}

# Transmission container based on alpine
transmission () { 
    cont_del transmission 2>/dev/null
    docker run -d --name transmission \
        -p 9091:9091 \
        -p 51413:51413/tcp \
        -p 51413:51413/udp \
        -v "${HOME}"/Torrents/downloads:/transmission/downloads \
        -v "${HOME}"/Torrents/incomplete:/transmission/incomplete \
        -v "${HOME}"/Downloads:/transmission/watch \
        -e "USERNAME=admin" \
        -e "PASSWORD=password" \
        jmutai/transmission "$@"
}

centos () {
     sudo mount -o loop ~/iso/CentOS-7-x86_64-Everything-1611.iso  /srv/http/cent7
     docker run -it --rm \
         --name cent7 \
         -e "container=docker" \
         -e XTERM="term" \
         -v ~/docker-env/local.repo:/etc/yum.repos.d/local.repo \
         -h cent7.example.com \
         centos /bin/bash 
 }

 rhel7 (){
     docker run -it --rm \
         --name rhel7 \
         --privileged  \
         -e "container=docker" \
         --cap-add SYS_ADMIN \
         --stop-signal=SIGRTMIN+3 \
         --security-opt=seccomp:unconfined \
         -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
         -h rhel7.example.com \
         registry.access.redhat.com/rhel7.3 \
        /usr/sbin/init 
 }

# Mariadb docker start function
# docker network create --driver overlay main-net

makip () { 
    export ROOT_PASSWORD="kipepeo"
    docker run -d \
        --name makip \
        -p 3306:3306 \
        -v /var/lib/mysql:/var/lib/mysql \
        -e MYSQL_ROOT_PASSWORD=$ROOT_PASSWORD \
        -e MYSQL_USER=kipepeo \
        -e MYSQL_PASSWORD=$WORDPRESS_PASSWORD \
        -e MYSQL_DATABASE=kipepeo \
        mariadb "$@"
}

wpkip () {
    export WORDPRESS_PASSWORD="kipepeo"
    docker run -it \
        -p 80:80 \
        --name wpkip \
        -e WORDPRESS_DB_HOST=makip:3306 \
        -e WORDPRESS_DB_USER=wordpress \
        -e WORDPRESS_DB_PASSWORD=$WORDPRESS_PASSWORD \
        --link makip \
        wordpress "$@"
}

wp () {
    cd ~/dockerfiles/wordpress-compose
    sh ./build.sh
}

wpclean () {
    cd ~/dockerfiles/wordpress-compose
    docker-compose stop; dockclean  
}

wpfix () {
    docker exec -d wp-kipepeo chmod 777 /var/www/html/wp-content/uploads/
}

wpbash () {
docker exec -it  wp-kipepeo /bin/bash
}

dbbash () {
docker exec -it  mariadb-kipepeo /bin/bash
}

# docker pull hurricane/teamviewer
teamv () {
    xhost +
    docker run  --rm --name teamviewer \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=$DISPLAY \
        jmutai/teamviewer
}



cent7 () {
docker run -it --rm \
    --name cent7 \
    -v ~/docker-env/local.repo:/etc/yum.repos.d/local.repo \
    centos
}

fire () {
    xhost +
    docker run -d \
        --name firefox \
        --memory 2gb \
        --cpuset-cpus 0 \
        --net host \
        -e DISPLAY=$DISPLAY \
        -h $(hostname) \
        --device /dev/snd \
        --device /dev/dri \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/.mozilla:$HOME/.mozilla \
        -v $HOME/Downloads:$HOME/Downloads \
        -v $HOME/Documents:$HOME/Documents \
        -v /etc/machine-id:/etc/machine-id:ro \
        jmutai/firefox firefox
}
ydl () {
docker run -it --rm \
    -v $(pwd):/downloads \
    jmutai/youtubedl \
    "$@"
}


docknet () {
    echo -en "Enter IP/SUBNET: "
    read net_subnet
    echo -en "Enter Network name: "
    read net_name
    if [[ "$net_name" == "" || "$net_subnet" == "" ]]; then
       echo ""
       echo "Provide subnet and network name"
   else
       docker network create \
           --driver bridge \
           --subnet "${net_subnet}" \
           "${net_name}" 
   fi
   }


spotify () {
    xhost +
	cont_del spotify 2>/dev/null
	docker run --rm   \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=$DISPLAY \
        --net host \
		-e QT_DEVICE_PIXEL_RATIO \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		--group-add audio \
		--group-add video \
		--name spotify \
		${DOCKER_REPO}/spotify
}

cs1 () {
cont_del server1 2>/dev/null
docker run -d \
    --name server1 \
    --hostname cs1.example.com \
    --net rhce_bridge \
    --ip 192.168.10.2 \
    --privileged \
    -e NAME=server1 \
    -e TERM="xterm" \
    -v ~/docker-env/local.repo:/etc/yum.repos.d/local.repo \
    -v /etc/localtime:/etc/localtime:ro \
    -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
    -e "container=docker" \
    centos \
    /usr/sbin/init 
}

cs1shell () {
docker exec -it server1 /bin/bash
}


## Spin Server2 on docker

cs2 () {
cont_del server2 2>/dev/null
docker run -d \
    --name server2 \
    --hostname cs2.example.com \
    --net rhce_bridge \
    --ip 192.168.10.3 \
    --privileged \
    -e NAME=server2 \
    -e TERM="xterm" \
    -v /etc/localtime:/etc/localtime:ro \
    -v ~/docker-env/local.repo:/etc/yum.repos.d/local.repo \
    -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
    -e "container=docker" \
    centos \
    /usr/sbin/init 
}

cs2shell () {
docker exec -it server2 /bin/bash
}

