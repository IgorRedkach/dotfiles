#!/usr/bin/env bash


# Shuffle files on mpv
play (){
    mpv --shuffle *
    }

# Create dir and cd
mkd() {
    mkdir -p "$@"
    cd "$@" || exit
}

mydu () {
    local arg=-sh
    if [[ -n "$@" ]]; then 
        du $arg -- "$@"
    else
        du $arg -- .[^.]* *
    fi
}

# Check system total boot time
st () {
systemd-analyze | awk '{print $NF}'
}


# Make a temporary directory and enter it
tmpd() {
		tmpdir=`mktemp -d` && cd $dir
    }




# Backup root filesystem
 sysbackup () {
     sudo rsync -aAXv --delete  --exclude-from=/etc/rsync_exclude.lst / /mnt/backup/    
     echo ""
     if [[ $? -eq 0 ]]; then
         echo ""
         echo "Backup sync successful"
     else
         echo " Sync failed"
         exit 1
     fi
 }



# Use wget to download complete site for offline reading

offline () {
    if [[ "$1" == "" ]]; then 
        echo ""
        echo "URL argument needed"
        echo oryyylse
    wget --limit-rate=2000k \
        --no-check-certificate \
        --no-clobber \
        --convert-links \
        --random-wait \
        -r -p -E -e robots=off -U mozilla "$1"  & tail -f nohup.out
fi
}

# Remove transmission .torrent.added files under Downloads directory

    rmtor () {
         find ~/Downloads -type f -name "*torrent*.added" -exec rm -rf {} \;
     }

mylanip () {
    nmcli con show
    echo ""
	con_name="$1"
	ip_address="$2"

	if [[ "$con_name" == "" || "$ip_address" == "" ]]; then
        echo "
        No arguments given:
        Argument 1: Connection name
        Argument 2: ip/subnet
        "
    else
        echo ""
    nmcli con mod "$con_name" ipv4.addresses "$ip_address"  ipv4.method manual connection.autoconnect yes
    nmcli con up "$con_name"
fi
} 

# Configure dns and gateway using nmcli
mylangw (){
    nmcli con mod "$1" ipv4.dns "8.8.8.8 8.8.4.4" ipv4.gateway "$2"
    if [[ "$1" == "" || "$2" == "" ]]; then
        echo " Help:
        Argument 1: Connection name
        Argument 2: gateway addrss
        Default dns: 8.8.8.8 8.8.4.4
        "
    fi
}

# Resize btrfs after growing
btrfsr () {
    sudo btrfs filesystem resize max "$1"    
    if [ "$1" == "" ]; then
        echo "No mounted filesystem path.."
       exit 
   fi
}

# Start wordpress compose docker containers
wp () {
    cd ~/dockerfiles/wordpress-compose
    sh ./build.sh
}

# Check date the os was installed
install_date () {
    sudo ls -lact --full-time /etc |tail
}

# Start vbox and load  modules manually
 vbox () {
     sudo modprobe -a \
         vboxdrv \
         vboxnetadp \
         vboxnetflt \
         vboxpci 
     virtualbox &
 }

# Configure system wide proxy
proxy () {
	until [ "$proxy_ip" != '' ] || [ "$proxy_port" != '' ]; do
		echo ""
		echo -en "Enter proxy ip: "
		read proxy_ip
		echo -en "Enter proxy port: "
		read proxy_port
	done

     export http_proxy=http://$proxy_ip:$proxy_port
     export https_proxy=$http_proxy
     export ftp_proxy=$http_proxy
     export rsync_proxy=$http_proxy
     export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
 }

# Start and stop sshd
 sshd () {
     sudo systemctl restart  sshd
     echo ""
     systemctl status sshd
 }

 sshdstop () {
    sudo systemctl stop sshd
} 

# Copy file contents to clipboard
mycp () {
    xclip -sel clip < "$1"
}

# Maually add ssh public key to remote server
addsshkey () {
    cat ~/.ssh/id_rsa.pub | ssh "$1" "cat >> ~/.ssh/authorized_keys"
}

# Generate encryped password
pass () {
     echo -en "Enter password: "
     read PW1

     echo -en "Re-enter password : "
     read PW2

     if test "$PW1" == "$PW2"; then
         python3 -c 'import crypt; print(crypt.crypt("${PW1}", crypt.mksalt(crypt.METHOD_SHA512)))'
     else
         echo "Passwords don't match"
     fi

}

myssh () {
    ssh-add ~/.ssh/id_rsa
	ssh  $1
}

update_hostness () {
    cd /tmp
    git clone https://github.com/cbednarski/hostess
    cd hostess
    make
    make install
    rm -rf hostness
    cd -
}

nouser () {
    sudo find / -nouser -o -nogroup 2>/dev/null 
}

myhugo () {
	cd ~/mysites/jmutai.com
    USER=jmutaijose
    HOST=rafiki
    DIR=/web/
    rm -rf public
    hugo 
    rsync -avz --del public/* ${USER}@${HOST}:${DIR}
}

myrsync () {
    rsync -avz -e "ssh -p $1" josepy@coreos:/path/to/files/ /local/path/
}

myfind () {
    local f_size=${1}
    sudo find / -type f  -size +"${f_size}" -exec ls -lsh {} \; 2>/dev/null
}

recert () {
	sudo  pacman-key --init
	sudo pacman-key --populate archlinux
	sudo pacman-key --refresh-keys
}
myip () {
    ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/'
}

gethugo () {
    go get -u -v github.com/kardianos/govendor
    go get -u -v github.com/spf13/hugo
    cd $GOPATH/src/github.com/spf13/hugo
    dns
    govendor sync && go install
}

playlist () {
    touch ~/.mpd/playlists/${1}.m3u
}

mkcd (){
    mkdir -p -- "$1" && cd -P -- "$1"
}

txt2pdf () {
    # Depend on enscript ghostscript
    echo -en "Enter output file name:"
    read FILE_NAME
    enscript -p ${FILE_NAME}.ps ${1}
    ps2pdf ${FILE_NAME}.ps ~/Documents/${FILE_NAME}.pdf
    rm -rf ${FILE_NAME}.ps
}

newpost () {
    local NAME=${1}
    local month='June-2017'
    if  [[ "$NAME" == "" ]]; then 
        echo "Enter valid post name: "
    else
    cd ~/mysites/jmutai.com/ &&  hugo new post/${month}/${NAME} && \
        vim content/post/${month}/${NAME}
fi
}

monitor () {
    echo -en "Enter process:"
    read process
    sudo journalctl -flu $process -o cat
}

todo () {
    file="$HOME/.todo"
( [ -e "$file" ] || touch "$file" ) && [ ! -w "$file" ] && echo cannot write to $file && exit 1
if [[ -z $1 || $1 == "--help" || $1 == "-h" || $1 == "help" ]]; then
	echo "┌──────[ todo ]──[ version 0.0.1 ]─────── ─ ─"
	echo "│ usage: todo <options>"
	echo "│ author: xero harrison - http://xero.nu"
	echo "├────────────────[ options ]"───────────── ─ ─
	echo "│ -s, --show            display the todo list"
	echo "│ -a, --add <string>    add a todo item"
	echo "│ -d, --delete <number> delete a todo item"
	echo "│ -h, --help            display this screen"
	echo "└──────────────────────────────────────── ─ ─"
elif [[ $1 = '--show' || $1 = '-s' || $1 == "show" ]]; then
	while true;
	do
		clear
		echo ""
		echo "     ██                 ██"
		echo "    ░██                ░██"
		echo "   ██████  ██████   ██████  ██████"
		echo "  ░░░██  ░██░░░░██░██░░░██░██   ░██"
		echo "    ░██  ░██   ░██░██  ░██░██   ░██"
		echo "    ░░██ ░░██████ ░░██████░░██████"
		echo "     ░░   ░░░░░░   ░░░░░░  ░░░░░░"
		echo ""
		echo "     _ __ __________________ __ _"
		echo ""
		nl -b a $file
		sleep 4
	done;
elif [[ $1 = '--delete' || $1 = '-d' || $1 == "delete" ]]; then
	if [[ -z $2 ]]; then
		echo "missing option"
		echo "pass an item number to delete"
	else
		sed -e $2'd' -i $file
	fi
elif [[ $1 = '--add' || $1 = '-a' || $1 == "add" ]]; then
        if [[ -z $2 ]]; then
		echo "missing option"
		echo "pass an item to add"
	else
		echo $2 >> $file
	fi 
else
	echo ""
	echo "unknown option"
	echo "call 'todo --help' for more info"
fi

}

mycpu () {
	sudo dmidecode |grep -i cpu

	cat /proc/cpuinfo | grep "physical id" | sort -u | wc -l # No of sockets
	echo ""
	# Show hyperthreading
	echo " Showing hyperthreading"
	egrep -e "core id" -e ^physical /proc/cpuinfo|xargs -l2 echo|sort -u
	echo ""
	lscpu | grep -i thread
}

getip () {
	ip -4 addr ls ${1} | awk '/inet / {print $2}' | cut -d"/" -f1
}

cloud-config () {
scp -9 2222 ~/cheat-sheets/coreos/cloud-config  root@${1}:/var/lib/coreo-install/user_date
}

extract () {
	echo Extracting $1 ...
	if [ -f $1 ] ; then
		case $1 in
          *.tar.bz2)   tar xjf $1  ;;
          *.tar.gz)    tar xzf $1  ;;
          *.bz2)       bunzip2 $1  ;;
          *.rar)       rar x $1    ;;
          *.gz)        gunzip $1   ;;
          *.tar)       tar xf $1   ;;
          *.tbz2)      tar xjf $1  ;;
          *.tgz)       tar xzf $1  ;;
          *.zip)       unzip $1   ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1  ;;
          *.ova)       tar xvf $1 ;;
          *)        echo "'$1' cannot be extracted via extract()" ;;
      esac
  else
      echo "'$1' is not a valid file"
  fi
}

send () {
	echo -en "\tEnter Email Subject: "
	read SUBJECT
	echo -en "\tEnter Cc Mail: "
	read CC_ADDRESS
	echo -en "\tBcc Mail: "
	read BCC_ADDRESS
	echo -en "\tEnter To Email: "
	read TO_ADDRESS
	echo -en "\tEnter File to Attach: "
	read FILE_ATTACHED

	SUBJECT=${SUBJECT:-"$1"}
	CC_ADDRESS=${CC_ADDRESS:-"$2"}
	BCC_ADDRESS=${BCC_ADDRESS:-"$3"}
	FILE_ATTACHED=${FILE_ATTACHED:-"$4"}

	mutt -s "$SUBJECT" -a "$FILE_ATTACHED" -c "$CC_ADDRESS"  -b "$BCC_ADDRESS"  "$TO_ADDRESS"
}

opendns () {
	cat > /etc/resolv.conf <<EOF
	nameserver 208.67.222.123
	nameserver 208.67.220.123
EOF
}

myss () {
	echo ""
	export PORT=$1
	ss -tunlp state established "( dport = :$PORT or sport = :$PORT )"
}

nfs () {
	sudo exportfs -arv
	sudo systemctl start nfs-server rpcbind.service
	systemctl status nfs-server rpcbind
	#sudo mount -t iso9660 -o loop $HOME/iso/coursefiles_3124_TS-SLE-12-Server-DVD-x86_64-GM-DVD.iso /mnt/suse 2>/dev/null
}

cheatpush () {
	cp -rf ~/.ssh ~/.cheat/ && \
        cd ~/.cheat \
        && myadd && mycommit && push && cd -
}

dotspush () {
	cd ~/mygit/dotfiles && myadd && mycommit && push && cd -
}

jmutaipush () {
	cd ~/mysites/jmutai.com/ && myadd && mycommit && push && cd -
}

codepush () {
	cd ~/code && myadd && mycommit && push && cd -
}

notespush () {
	cd ~/notes && myadd && mycommit && push && cd -
}

psmem () {
    ps_name=$1
    if [[ "$ps_name" == '' ]]; then
        sudo ps_mem
    else
        sudo ps_mem | grep -P $ps_name
    fi
}

ssh_config () {
    user=root
    ip_address=$1
    short_hostname=$2 
    domain=$3
    long_hostname=$short_hostname.$domain
    if [[ $1 == "" || $2 == "" || $3 == "" ]]; then
        echo ""
        echo "USAGE: ${0##*/} <Argument>"
        echo "Arguments:"
        echo -e "\t1\tIP Address:"
        echo -e "\t2\tShort Hostname:"
        echo -e "\t3\tDomain Name:"
    else
        echo $ip_address $short_hostname.$domain $short_hostname | sudo tee -a /etc/hosts
        tail -5 /etc/hosts
        echo ""
        echo "" >> ~/.ssh/config
cat >>~/.ssh/config<<EOF
Host  $short_hostname
  Hostname  $long_hostname
  User      $user 
EOF

cat ~/.ssh/config

fi
}

myrd () {
    rdesktop -g 1067x640 -P -z $1:3389
}

engine_backup () {
    export backup_file="ovirt-engine-backup-`date +%Y-%m-%d`"
    ssh root@ovirtengine "engine-backup --mode=backup --file=${backup_file} --log=backup1.log" && \
    scp root@ovirtengine:/root/${backup_file} ~/.cheat && \
    ls -lh ~/.cheat/${backup_file} && \
    cheatpush
}

encrypted_passwd () {
    python -c 'import crypt,getpass; \
print(crypt.crypt(getpass.getpass(), \
crypt.mksalt(crypt.METHOD_SHA512)))'
}

csmonkey () {
    docker run -ti --rm -v /home/jmutai/.cheat/cloudmonkey_config:/cloudmonkey/config cloudstack/cloudstack-cloudmonkey
}
