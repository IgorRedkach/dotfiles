#!/bin/bash

# Backup important files to Dropbox

# Shuffle files on mpv
play (){
    mpv --shuffle *
    }


# Check system total boot time
st () {
systemd-analyze | awk '{print $NF}'
}


# Make a temporary directory and enter it
tmpd() {
		tmpdir=`mktemp -d` && cd $dir
    }




# Package management
 sysbackup () {
     sudo rsync -aAXv --delete  --exclude-from=/etc/rsync_exclude.lst / /mnt/backup/    
     echo ""
     if [[ $? -eq 0 ]]; then
         echo ""
         echo "Backup sync successful"
     else
         echo " Sync failed"
         exit 1
     fi
 }

# Vm management
# start vm management daemons
vm () {
    sudo systemctl start libvirtd.service
    sudo systemctl start vsftpd.service
    sudo systemctl start virtlogd.socket
}

# stop libvirt daemon and vsftpd services
vmstop () {
    sudo systemctl stop libvirtd.service 
    sudo systemctl stop vsftpd.service
}

# Stop all vms running
novm () {
	for i in `sudo virsh list | grep running | awk '{print $2}'`
	do
		sudo virsh shutdown $i
	done                                                                          
}

# List all kvm vms
vmlist () {
	sudo virsh list --all
}

# start rhev vms
rhev () { 
	sudo virsh start node1
	sudo virsh start rhevm
}

# Use wget to download complete site for offline reading

offline () {
    URL="$1"
    DIR="$2"
    # Check if url is given
    if [  -z "$1" ]; then
        echo "Usage : "$0" <url> <directory>"
        echo "If no directory is provided, default is ~/websites"
        exit 0
    else
        echo ""
        echo "*** Downloading "${URL}" content to "{$DIR}"..."
        cd "$DIR"
        sleep 2
        wget --limit-rate=2000k --no-clobber --convert-links --random-wait -r -p -E -e robots=off -U mozilla "$URL" & tail -f nohup.out
    fi

    }

    cleantor () {
        locate "*.torrent.added" | xargs -I {} rm -rf {} 
    }

    rmtot () {
         find ~/Downloads -name "*torrent*.added" | xargs -I {}  rm -rf {}
     }

mylanip () {
    set eu
    nmcli con mod eno1 ipv4.addresses "$1"  ipv4.method manual connection.autoconnect yes
    if [ "$1" == "" ]; then
        echo "ip address and subnet not specified"
        exit 
    fi
} 

mylangw (){
    set eu
    nmcli con mod eno1 ipv4.dns "8.8.8.8 8.8.4.4" ipv4.gateway "$1"
    if [ "$1" == "" ]; then
        echo " Gateway not specified  not specified"
        exit 
    fi
}

btrfsr () {
    sudo btrfs filesystem resize max "$1"    
    if [ "$1" == "" ]; then
        echo "No mounted filesystem path.."
       exit 
   fi
}

wp () {
    cd ~/dockerfiles/wordpress-compose
    sh ./build.sh
}

install_date () {
    sudo ls -lact --full-time /etc |tail
}

# Funtion to create vm snapshot in KVM
snap () {
    while [[ $dom_name == "" || $snap_name == "" ]]; do
        echo  -n "Enter domain name: " 
        read dom_name
        echo  -n "Enter snapshot name: " 
        read snap_name
        echo  -n "Enter Snapshot description: " 
        read desc
    done
    echo ""
    sudo virsh snapshot-create-as --domain "$dom_name" \
        --name "$snap_name" \
        --description "$desc"
 }

 snaplist () {
    sudo virsh snapshot-list --domain "$1" 
 }
 snapinfo () {
     sudo virsh snapshot-info --domain "$1" "$2"
     # $1 domain name
     # $2 snapshot name
 }
 snaprestore () {
     sudo virsh shutdown --domain "$1"
     sudo virsh snapshot-revert --domain "$1"  --snapshotname "$2" --running
 }

 snapdelete () {
    sudo  virsh snapshot-delete --domain "$1" --snapshotname "$2"
}

proxy () {
     export http_proxy=http://172.16.15.83:8020
     export https_proxy=$http_proxy
     export ftp_proxy=$http_proxy
     export rsync_proxy=$http_proxy
     export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
 }

 vbox () {
     sudo modprobe -a \
         vboxdrv \
         vboxnetadp \
         vboxnetflt \
         vboxpci 
     virtualbox
 }
