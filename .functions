#!/usr/bin/env bash


# Shuffle files on mpv
play (){
    mpv --shuffle *
    }


# Check system total boot time
st () {
systemd-analyze | awk '{print $NF}'
}


# Make a temporary directory and enter it
tmpd() {
		tmpdir=`mktemp -d` && cd $dir
    }




# Backup root filesystem
 sysbackup () {
     sudo rsync -aAXv --delete  --exclude-from=/etc/rsync_exclude.lst / /mnt/backup/    
     echo ""
     if [[ $? -eq 0 ]]; then
         echo ""
         echo "Backup sync successful"
     else
         echo " Sync failed"
         exit 1
     fi
 }



# Use wget to download complete site for offline reading

offline () {
    if [[ "$1" == "" ]]; then 
        echo ""
        echo "URL argument needed"
        echo oryyylse
    wget --limit-rate=2000k \
        --no-check-certificate \
        --no-clobber \
        --convert-links \
        --random-wait \
        -r -p -E -e robots=off -U mozilla "$1"  & tail -f nohup.out
fi
}

# Remove transmission .torrent.added files under Downloads directory

    rmtor () {
         find ~/Downloads -name "*torrent*.added" | xargs -I {}  rm -rf {}
     }

mylanip () {
    if [[ "$1" == "" || "$2" == "" ]]; then
        echo "
        No arguments given:
        Argument 1: Connection name
        Argument 2: ip/subnet
        "
    else
    nmcli con mod "$1" ipv4.addresses "$2"  ipv4.method manual connection.autoconnect yes
fi
} 

# Configure dns and gateway using nmcli
mylangw (){
    nmcli con mod "$1" ipv4.dns "8.8.8.8 8.8.4.4" ipv4.gateway "$2"
    if [[ "$1" == "" || "$2" == "" ]]; then
        echo " Help:
        Argument 1: Connection name
        Argument 2: gateway addrss
        Default dns: 8.8.8.8 8.8.4.4
        "
        exit 
    fi
}

# Resize btrfs after growing
btrfsr () {
    sudo btrfs filesystem resize max "$1"    
    if [ "$1" == "" ]; then
        echo "No mounted filesystem path.."
       exit 
   fi
}

# Start wordpress compose docker containers
wp () {
    cd ~/dockerfiles/wordpress-compose
    sh ./build.sh
}

# Check date the os was installed
install_date () {
    sudo ls -lact --full-time /etc |tail
}

# Start vbox and load  modules manually
 vbox () {
     sudo modprobe -a \
         vboxdrv \
         vboxnetadp \
         vboxnetflt \
         vboxpci 
     virtualbox
 }

# Configure system wide proxy
proxy () {
     export http_proxy=http://172.16.15.83:8020
     export https_proxy=$http_proxy
     export ftp_proxy=$http_proxy
     export rsync_proxy=$http_proxy
     export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
 }

# Start and stop sshd
 sshd () {
     sudo systemctl restart  sshd
     echo ""
     systemctl status sshd
 }

 sshdstop () {
    sudo systemctl stop sshd
} 

# Copy file contents to clipboard
mycp () {
    xclip -sel clip < "$1"
}

# Maually add ssh public key to remote server
addsshkey () {
    cat ~/.ssh/id_rsa.pub | ssh "$1" "cat >> ~/.ssh/authorized_keys"
}

# Generate encryped password
pass () {
     mkpasswd --method=SHA-512 --rounds=4096
     # the above command would create from stdin an SHA-512 password hash
     #           with 4096 salt rounds
     # python3 -c 'import crypt; print(crypt.crypt("nerdy@kim", crypt.mksalt(crypt.METHOD_SHA512)))'

}

