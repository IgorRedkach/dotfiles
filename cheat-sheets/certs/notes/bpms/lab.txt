https://drive.google.com/open?id=0B8mmXW6hJKdiaVpndWxFV3Nmbkk
https://github.com/gpe-mw-training/advanced-process-development-labs-etc/raw/master/etc/gpte-bpms-advanced-630.vdi.torrent

1. Virtual Machine

In order to quickly get you productive with the labs in this course, a virtual machine pre-installed with all of the needed client-side developer tooling is provided.

The course virtual machine is provided in a VDI format and can be run on your local workstation using Virtual Box.
1.1. Prereqs

Your local workstation should allow for the installation of 64 bit Virtual Box.

In addition, it should be able to dedicate a minimum of 2 64-bit CPUs and 4G RAM to the course virtual machine virtual machine.
1.2. Installation

    Download the gpte-bpms-advanced-630.vdi Virtual Box image using one of the following mechanisms:

        Direct

        Download the course virtual machine directly .

        BitTorrent

        If you are familiar with BitTorrent and have a BitTorrent client, then downloading the same VDI image using this protocol is another (usually much faster and reliable) option. Download the link: course virtual machine torrent file, open the torrent file using your favorite BitTorrent client and download the virtual machine.

    VM Operating System Credentials

        The default username/password for the VM is jboss/jboss.

        The jboss operating system user has sudo access.

    Install Virtual Box on your local workstation.
        The course virtual machine is a 64 bit virtual machine. Subsequently, ensure that the x86_64 bit (amd64) version of VirtualBox is installed. Also, ensure that virtualization is enabled in the BIOS of your host machine. Please refer to online VirtualBox documentation for assistance with configuring it for your workstation.

    Start VirtualBox on your local workstation and navigate to: Machine → New.

    In the Create Virtual Machine panel, populate its fields:

        Name: gpte-bpms-advanced

        Type: Linux

        Version: Red Hat (64-bit)

    Click Next.

    In the Memory panel, specify 4096 MB of RAM and click Next.

    In the Hard Disk panel:

        Select Use an existing virtual hard disk file.

        Browse your hard drive and select the previously downloaded gpte-bpms-advanced-630.vdi image.

        Click Create.

    Click Start.

    The virtual machine should start and display the MATE window manager login.

    Enter a userId of jboss and a password of jboss.

    wm_login

    Recommended: Enable [vbga] so as to leverage the full display resolution of your host machine.

1.3. Test network connectivity

Access to the internet from within the course virtual machine is important. By default, the network settings of the virtual machine are expecting the Virtual Box host to provide it at startup with an DHCP address.

To test network connectivity of your new VM, execute Sthe following:

    In the VM, open a terminal window.

    Execute:

    ip addr show

    You should see results similar to the following:

    enp0s25: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
        link/ether 54:ee:75:2c:93:91 brd ff:ff:ff:ff:ff:ff
        inet 192.168.0.10/24 brd 192.168.0.255 scope global enp0s25
           valid_lft forever preferred_lft forever
        inet6 fe80::56ee:75ff:fe2c:9391/64 scope link

    The above output indicates an ip address of 192.168.0.10 was assigned .
        The ip address assigned to your local Virtual Box machine will become particularly important if you choose to use the included BPM Suite installation (discussed in the section: BPM Suite )

    Test network connectivity:

    $ ping -c 5 8.8.8.8
    PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
    64 bytes from 8.8.8.8: icmp_seq=1 ttl=57 time=20.3 ms
    64 bytes from 8.8.8.8: icmp_seq=2 ttl=57 time=20.4 ms
    64 bytes from 8.8.8.8: icmp_seq=3 ttl=57 time=20.4 ms
    64 bytes from 8.8.8.8: icmp_seq=4 ttl=57 time=20.4 ms
    64 bytes from 8.8.8.8: icmp_seq=5 ttl=57 time=20.7 ms

    --- 8.8.8.8 ping statistics ---
    5 packets transmitted, 5 received, 0% packet loss, time 4005ms
    rtt min/avg/max/mdev = 20.311/20.470/20.710/0.223 ms

    Congratulations! You now have a workstation that will quickly get you productive in this course.

1.4. BPM Suite

The remainder of the lab instructions in this course are going to reference by default a remote BPM Suite lab environment that will be dedicated to you. You will need excellent network connectivity to make use of this dedicated, remote BPM Suite lab environment.

The course virtual machine, however, also comes pre-installed with the same BPM Suite configuration hosted online.

Depending on the quality of your network, you may opt to execute the lab instructions in your local course virtual machine instead of working in your remote online environment.
    If you prefer executing your BPM Suite in a dedicated remote environment (as opposed to a local environmnet provided by your virtual machine), then please skip this entire section and move to the next lab. The next lab will detail how to gain access to your dedicated remote BPM environment.
1.4.1. Start BPM Suite

    In the virtual machine, open a terminal window (or open a new tab if you already have a terminal window open).

    Ensure that your existing shell is using the jboss operating system user:

    $ id
    uid=1000(jboss) gid=1000(jboss) groups=1000(jboss) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023

    Execute the following:

    cd ~/lab
    ./start-bpms.sh

        After about 1 minute or so, the logging to the console output should stop with messages similar to the following:

        Deployed "kie-server.war" (runtime-name : "kie-server.war")
        Deployed "business-central.war" (runtime-name : "business-central.war")
        Deployed "dashbuilder.war" (runtime-name : "dashbuilder.war")
        Http management interface listening on http://192.168.122.27:9990/management
        Admin console listening on http://192.168.122.27:9990
        JBoss EAP 6.4.4.GA (AS 7.5.4.Final-redhat-4) started in 67953ms - Started 1122 of 1159 services (82 services are lazy, passive or on-demand)

1.4.2. Log into BPM Suite

    Open a browser (either on your host machine or using the Firefox browser in the VM)

    Navigate to: <vm ip address>:8080/business-central
    login page

    Authenticate using credentials of: jboss / bpms

1.4.3. JBoss EAP Management Console

In later labs of this course, you’ll be asked to make use of various administrative functionality provided by the web based Management Console of JBoss EAP. (JBoss EAP is the application server that BPM Suite is layered on).

Access the Management Console as follows:

    Open a browser (either on your host machine or using the Firefox browser in the VM).

    Navigate to: http://<vm_ip_address>:9990

    Authenticate using credentials of: admin / admin
    eap admin console

2. Appendix

The following provides reference for scenarios that you may encounter in later modules of this course.

Please refer back to this section as needed.
2.1. View JBoss BPM Suite 6 Data in the MySQL Database

Throughout the labs for this course, you may need to view your mysql database tables to understand how JBoss BPM Suite 6 is operating. To view current data in your mysql database, execute the following:

mysql -u jboss -pjboss bpms

The BPM Suite 6 Administration and Configuration Guide provides a detailed description of the JBoss BPM Suite 6 database schema.
2.2. Resolve Process Instance Errors

During development it is common to introduce an error in your BPMN2 that creates the following situation:

    The error is only detected at runtime.

    The error prevents the ability to abort the process instance that is in the error state.

    Due to lingering process instances, you cannot build and redeploy a KIE project that includes a correction to the original problem in a BPMN2 process definition.

If you find yourself in this situation, simply delete all records in the ProcessInstanceLog table in your JBoss jBPM database as follows:

    At a terminal window of you virtual machine, execute the following to log into the bpms database of the local mysql server.

    mysql -u jboss -pjboss bpms

    At the mysql command prompt, execute the following:

    mysql> delete from ProcessInstanceLog;
    Query OK, 5 rows affected (0.00 sec)

    Notice that mysql responds the deletion command with the number of records deleted.

    Exit the mysql shell: exit.

    At the BPM Console, navigate to Authoring → Tools → Project Editor.

    Click Build and Deploy.

    You should now be able to successfully redeploy a KIE project even though there were previous process instances in an error state.

2.3. Virtual Box Guest Additions

The default display resolution of the virtual machine is rather low (1042 x 768) . The small display can lead to a frustrating experience as you’re trying to work through the labs of this course.

Virtual Box allows virtual machines to use the full resolution of a hosts display via its Guest Additions.

Assuming you are using a host laptop with high resolution, enabling your Virtual Box environment to make use of Guest Additions is highly recommended.

Do so as follows:
2.3.1. Install Guest Additions for your host
Linux

The Virtual Box install available from https://www.virtualbox.org/wiki/Linux_Downloads comes pre-installed with Guest Additions.

No futher tasks needed if you’ve installed Virtual Box from the above download site.
OSX
Windows
2.3.2. Enable Guest Additions in the virtual machine

    Ensure the virtual machine is started.

    In the top panel of the virtual box window, click Devices -> Insert Guest Additions CD Image.
    select ga

    You will be prompted with an option to run the contents of the Guest Additions CD.

    Ensure that Open Autorun Prompt`option from the drop-down is selected and click `OK.
    ga prompt

    The next prompt will ask whether you choose to run the Guest Additions software. Click Run.
    ga run

    You will be prompted for the password of the root operating system user.

    Enter jboss and click Authenticate.

    A terminal window in the VM should automatically pop-up and begin to build the Guest Additions kernel modules in the VM.

    Give it a minute or two. Eventually you will be prompted to Press Return to close the window.
    ga building

    Bounce your virtual machine

2.3.3. Increase screen resolution of VM

    Once the VM is restarted, navigate to the following in the virtual machine: System -> Preferences -> Hardware -> Displays
    nav display

    Click the Resolution selection drop down.

    Notice that you now have many more resolution options. Select the highest display resolution provided by your host operating system.
    display options

    At the bottom of the Monitor Preferences pop-up, click: Apply.






New Project Lab

Goal:

Add the essential structure for Organization, Repository, and Project via the BPM Console of your BPM Suite environment.
Prerequisites:

Completion of the BPM Suite 6 Setup lab and the Analysis lab
1. Log In

    If necessary, restart your remote bpm application if its not already running.

    As done in previous labs, open a web browser and navigate to: http://<your.bpms.network.address>/business-central.

    Log in with the username of jboss and a password of bpms. The JBoss BPM Suite 6 home page appears.
    lab bpms 1
    Figure 1. JBoss BPM Suite 6 home page
        If using a remote BPM environment, please be patient during the log in process. Approximately 7MBs of javascript libraries to support the business-central web application are downloaded over the internet to your browser. The quickness and reliability of this download is highly dependant on the quality of your internet connection. The speed of your connection is obviously important. However, even more critical is the stability of your internet connection. If your
network jitter looks more like this and less like this …. expect significant problems. Please see the Appendix of the first lab of this course for more discussion on this topic.

2. Add a New Organizational Unit

In JBoss BPM Suite 6, assets are organized into organizational units, repositories, and projects. Therefore, you first need to create an organizational unit.

    From the menu, select Authoring → Administration.

    Select Organizational Units → Manage Organizational Units.

    On the Organizational Unit Manager screen, click Add.

    On the screen that appears, enter the following:

        Name - acme

        Default Group ID - org.acme.insurance

        Owner - jboss
        lab bpms 2
        Figure 2. Add New Organizational Unit screen

    Click Ok.

3. Create a New Git Repository

Next, you need to create or clone a BPM Git repository. JBoss BPM Suite 6 uses Git to provide the repository structure, so you can either clone an existing Git repository or create a new one. For this lab, create a new repository.

    Click the Repositories link (next to Organizational Units on the administration page) and select New repository.

    On the screen that appears, enter or select the following:

        Repository Name - insurancepolicy

        Organizational Unit - acme

        Managed Repository - leave unchecked.

    Click Finish.
    What is a Repo?

    The term repo appears throughout the labs for this course as well as official Red Hat documentation on BPM Suite 6. This is Red Hat’s short form of the term repository. However, the term can have various meanings depending on the context. Within JBoss BPM Suite 6 we use the following types of repos:

        BPM Suite 6 Artifact Repository - Deployable BPM artifacts are retrieved from this artifact repository for deployment to the BPM server. In a BPM production environment, the artifact repository could be integrated with a remote Maven repo server such as Nexus. The default configuration (and the configuration used in this course) however is that the BPM artifact repository is co-located with the BPM Suite 6 server on its local filesystem.

        Maven repos for BPM Suite 6 - JBoss BPM Suite 6 includes both offline and online Maven repos that include supported BPM libraries (as opposed to community drools and jbpm libraries). Client side tooling (such as JBoss Developer Studio) are typically configured to reference the BPM Suite 6 maven repository so as to be able to build and unit test a BPM Suite 6 project. As part of the previous lab for module 1 of this course, you should have already configured your JBoss
Developer Studio settings to reference either the offline or online BPM Suite 6 supported maven repo.

        Git repos for BPM Suite 6 - JBoss BPM Suite 6 uses a Git bare repo to version control its controlled assets. This repository is co-located with the JBoss BPM Suite 6 runtime at: /opt/bpms_data/bpms-repo/.niogit . This BPM Suite 6 specific repo can be cloned to your local environment via JBDS. When done so, a git enabled working project appears in your JBDS. BPM Suite 6 artifacts (such as rules and process definitions) can be modified in your local JBDS Those
modifications can then be synced with the git bare repository used by BPM Suite 6 .

4. Create a New BPM Project

Now you can create a project, which is the main organizational and deployment unit for your business rule and process definition assets. A project is modeled like a Maven project. When a project is built and deployed, it is added as a Maven artifact (.jar and .pom) to the BPM Artifact Repository. Subsequently, the built BPM artifact is ready to be executed on by the BPM Suite 6 process and/or rules engine.

    From the main menu, select Authoring → Project Authoring.

    The Project Explorer screen appears, which shows the organizational structure. Make sure that the acme organizational unit and the insurancepolicy repository are selected.
    lab bpms 3
    Figure 3. Organizational unit and repository selection

    On the menu, select New Item → Project.

    In the Project field, enter policyquote.

    Click Ok.

    A new screen appears entitled: New Project.

    Modify the value of the GroupId field to: org.acme.insurance
    lab bpms 4

    Because the project is a Maven project, a Group ID, Artifact ID, and Version ID are required.

    If you want, you can also add a short description of your project.

    Click Finish.

    In the Project Explorer panel, notice the inclusion of the new policyquote project
    expanded project

Congratulations! You have successfully created your first git repository (insurancepolicy) to version control your rules / process definitions and you have also created your first mavenized BPM project 







Asset and Deployment Management Lab

Table of Contents

    1. Overview
        1.1. Configure ssh client
    2. Clone repo to local workstation
        2.1. Start JBoss Developer Studio
        2.2. Intro to eGit Plug-in for JBDS
        2.3. Clone the insurancepolicy Repo
    3. Import the policyquote Project
    4. Modify contents of insurancepolicy git repo
        4.1. Add .gitignore in JBDS
        4.2. View .gitignore in BPM Console

Goals:

    Use JBoss Developer Studio to clone the insurancepolicy Git bare repo that was created in the previous module.

    Mody the content of the insurancepolicy git repository via JBoss Developer Studio.

    Get a sense of the build and deploy workflow possibilities for JBoss BPM Suite 6 projects.

Prerequisites:

    Installation of JBoss Developer Studio and the Integration Stack suite of plug-ins.

1. Overview

In this lab you will clone the insurancepolicy git repository of your remote BPM runtime (ie: course virtual machine) to your local workstation. This step is a bit tricky and involves client utilities installed on your local workstation such as git and the configuration of ssh client settings.

Once the insurancepolicy git repository is cloned, you will then make a few modifications to its content using JBoss Developer Studio.
1.1. Configure ssh client

The protocol used to interact with the embedded git repository of BPM Suite is: ssh. To ensure that both the embedded ssh server of BPM Suite and the client are following the same protocols, execute the following:
    This section is important due to a recent incompatibility between the embedded Git server in BPM Suite and the latest OpenSSH client that comes out of the box in Fedora 23. (Do a web search on the following for more information if interested: ssh-dss openssh deprecated). Fedora 23 is the operating system used in the Virtual Box image provided in this course.

    As the jboss user, execute:

    echo -en "Host 127.0.0.1\n    HostkeyAlgorithms ssh-dss" > ~/.ssh/config

    This new .ssh/config file ensures that the local ssh client communicates correctly with the embedded BPM sshd server.

2. Clone repo to local workstation
2.1. Start JBoss Developer Studio

JBoss Developer Studio includes the Eclipse Git plug-in. This plugin will be used to sync your git-enabled insurancepolicy project between your BPM Suite runtime and JBDS.

    In your local development environment, start JBoss Developer Studio.

        At the Desktop, double-click the script: start_jbds.sh

        A pop-up will appear. Click the Execute button
        jbds execute

    You’ll be prompted to select a workspace.

    Ensure that you’ve selected the default workspace at: /home/jboss/workspace
    default workspace3
        The default workspace of JBoss Developer studio included in the virtual machine has its Maven user settings configured to leverage: $HOME/.m2/settings.xml. This Maven settings configuration file allows for use of the pre-installed BPMS off-line Maven repository. Use of the default settings will avoid download of redundant Maven libraries.

2.2. Intro to eGit Plug-in for JBDS

    To manage Git repositories in JBoss Developer Studio, navigate to Window → Open Perspective → Other → Git.

    Notice the JBoss and Git Repository Exploring tabs in the upper-right corner of the screen. Clicking these tabs toggles between the two JBoss Developer Studio perspectives. You will toggle between these two perspectives throughout the course labs.
    git jbds perspective
    Figure 1. Two perspectives

2.3. Clone the insurancepolicy Repo

BPM Suite 6 embeds a git repository to version control business artifacts such as rules and process definitions. This repository is exposed to remote clients via the following protocols:

    git native

    Allows read-only access to the git repo and is available on port 9418

    ssh

    Allows read-write access to the git repo and is available on port 8001.

    Authentication can be either ssh key-pair or username/password.

    For the purposes of this course, this ssh protocol will be used and authentication will be via username/password.

Clone the insurancepolicy.git bare repository to your local file system using JBoss Developer Studio.

    Ensure that BPM Suite is running (ie: log into the business-central web app ).

    Click the link (or icon at the top) to Clone a Git Repository in the Git Repositories window that you previously enabled in JBoss Developer Studio.
    cloned link

    A new pop-up will appear entitled: Source Git Repository

        In the URI text box, copy and paste the equivalent of the following:

        ssh://jboss@bizlogicdev:8001/insurancepolicy

        jbds clone repo

        In the Password textbox, enter: bpms

        Click Next

    JBoss Developer Studio authenticates and connects via SSH to your remote BPM Suite lab environment. It then queries the Git bare repo for available branches and returns the master branch and displays in a new pop-up entitled Branch Selection
    jbds select branch

        Click Next again.

    A new pop-up appears entitled Local Destination.

    Its in this pop-up that you configure the local storage location for your insurancepolicy git project.

        For the value of the Directory text box, just leave the default

        Click the Import all existing projects after clone finishes checkbox

    Click Finish.
    jbds select directory

2.3.1. Results from Cloning insurancepolicy Bare Repository

    Most likely there are now two git enabled projects viewable in your JBDS:

        bpmslab : never used

        insurancepolicy : required

    The insurancepolicy git project in the Git Repositories perspective should now appear as follows:

cloned insurancepolicy
Figure 2. After cloning
3. Import the policyquote Project

This section of the lab involves importing the policyquote project into JBoss Developer Studio. The policyquote project within the insurancepolicy working repo contains a valid Maven .pom file that can be imported as a project into JBoss Developer Studio.

    In JBoss Developer Studio, toggle to the JBoss perspective.

    Navigate as follows: File → Import → Maven → Existing Maven Projects → Next.

    When the Import Maven Projects screen appears, click Browse and navigate to your working insurancepolicy repo (the repo you cloned just previously in this lab).

    Navigate to and select the policyquote project.
    maven import
    Figure 3. Import Maven Projects screen

    Click Finish.

    After a few seconds (depending on your network speed) the policyquote project will appear in the Project Explorer panel
    project expl

Congratulations!! You now have two environments in which you can view and modify BPM design-time artifacts:

    Tooling included in BPM Central

    This is primarily used by System Analysts but is valuable for developers as well.

    BPM tooling installed in JBoss Developer Studio

    This is primarily used by developers but is valuable for very technical System Analysts.

    You are likely to notice a problem with policyquote/pom.xml in JBoss Developer Studio that relates to: Plugin execution not covered by lifecycle configuration: org.kie:kie-maven-plugin:6.0.2-redhat-6:build (execution: default-build, phase: compile). This is a known issue that does not affect the labs in this course.
4. Modify contents of insurancepolicy git repo

In this final section of the lab, a change to the new insurancepolicy repo will be made in your local workstation. That change will then be pushed to the git repo managed by your remote BPM container.

Git uses a file named .gitignore to exclude files that you never want to include in the repo, such as generated class files. A new .gitignore file will be created at the root of the insurancepolicy repo.
4.1. Add .gitignore in JBDS

For this section of the lab a plain text editor will be needed to add this file because it (insurancepolicy/.gitignore) exists outside of the policyquote project in JBDS.

    In your local workstation (using the file explorer of your operating system … not JBDS), navigate to the insurancepolicy folder created when you previously cloned.

    With your favorite text editor, create a new file in that folder named .gitignore.
        This will be a hidden file due to the . at the front of the file

    Add the following contents to this new file:

    target/
    bin/
    lab_assets/
    .settings/
    .classpath
    .project
    *.zip
    *.log

    Save the file and return to JBoss Developer Studio.

    Open the Git Repository Exploring perspective in JBoss Developer Studio.

    Click the Refresh button and confirm that the .gitignore file appears in the Working Directory folder.
    gitignore

    While still in the Git Repository Exploring perspective, navigate to the Git Staging view panel
    gitstage

    Click the Refresh button and notice the entry of the .gitignore file in the Unstaged Changes section.

    As per typical git workflow … add, commit and push this new file to the remote BPM git repo

        Right-click the .gitignore file and select: Add to Git Index

        The file will move to the Staged Changes section

        In the Commit Message textbox, enter in a message such as: new .gitignore
        commitpush

        Click the Commit and Push button

        A confirmation pop-up will appear called Pushed to insurancepolicy - origin

    Click OK

4.2. View .gitignore in BPM Console

Complete this lab by confirming that the commit that includes the new .gitignore file is viewable in the BPM Console of BPMS Suite 6.

    Return to your browser to authenticate back into the BPM Console of your remote BPM Suite 6 container.

    Navigate to Authoring -> Administration

    In the File Explorer panel to the left, drill down to Repositories -> insurancepolicy

    Notice the latest commit message (previously created in JBDS) in the Commit History panel





Data Modeler Lab
Table of Contents

    1. Create a Data Object
    2. Create Data Object Fields
    3. Create Other Objects

The data modeler is the built-in editor for creating data objects as assets in a BPM Suite 6 project. Data objects are custom data types implemented as plain old Java objects (POJOs). After importing a domain object into a component, it can be used in any resource of a KIE project such as a BPMN2 process definition.

Of note is that the BPM Suite 6 data modeler is not a full-blown IDE. Instead, it is a tool aimed at non-developers and analysts to assist them with capturing requirements. In this lab, the data modeler will be used to create pre-liminary custom data types that facilitate the creation of rules and process definitions. In subsequent labs of this course, those custom data types will be modified with additional functionality using a more capable tool: JBoss Developer
Studio.

The BPM Suite 6 Data Modeler also needs to ensure that it does not over-write the advanced modifications (such as annotations) that could be made by an external tool to its data-model classes. Subsequently, it’s behavior once it detects external modification of its data model classes is to:

    display these modified data model classes in read-only mode.

    display a warning that it has detected the modification of its data model classes by an external tool

Goal:

Create the domain model classes to use in rule processing and process executions.
1. Create a Data Object

    Authenticate using the jboss user into the BPM Console of your remote BPM Suite 6 lab environment.

    Navigate to: Authoring -> Project Authoring

    In the Project Explorer panel, drill down to the org -> acme -> insurance folder
    pexplorer

    The Java package name of the data objects to be created will be: org.acme.insurance

    In the top toolbar of the Project Authoring panel, select: New Item -> Data Object
    new data

    A new pop-up entitled Create New Data Object will appear.

        Populate the Data Object text box with the following: Rejection

        Ensure that the package specified is: org.acme.insurance

        Leave the Persistable option unchecked.

        Press OK

        Notice the addition of the Rejection data object under the Project Explorer.
        project explorer rejection

        In the Data Objects panel for the new Rejection class, notice the following general properties:
        Table 1. Rejection object details

        Field
            

        Value
            

        Description

        Identifier
            

        Rejection
            

        Data object name, which is unique within the package

        Label
            

        Rejection
            

        Label that displays in the Objects panel

        Package
            

        org.acme.insurance
            

        Package that contains this data object

        Superclass
            

        java.lang.Object
            

        Data object from which other data objects inherit all their fields

    Click Save.

2. Create Data Object Fields

Now that the Rejection data class has been created, add a single field to it.

    In the Data Objects panel for the new Rejection class, click the add field button and populate with the following values:
    Table 2. Field properties

    Field
        

    Value
        

    Description

    Id
        

    reason
        

    Field ID unique within the data object

    Label
        

    Reason
        

    Label that displays in the Fields panel

    Type
        

    String
        

    Data type of the field

    The pop-up should appear as follows:
    new field
    Figure 1. Create new field screen

    Click Create

    The new Rejection data type now consists of a single field: reason.

3. Create Other Objects

For the purposes of this course, two additional data objects will be created: Policy and Driver.

These two data objects will be created in the same manner that the Rejection data object was created and in the same Java package: org.acme.insurance.

    Create a Driver object with the following details:
    Table 3. Driver object details

    Field
        

    Value

    Identifier
        

    Driver

    Label
        

    Driver

    Existing package
        

    org.acme.insurance

    Superclass
        

    java.lang.Object

        Add the following fields to the Driver class:
        Table 4. Driver object fields

        Id
            

        Label
            

        Type

        driverName
            

        Driver Name
            

        String

        age
            

        Age
            

        Integer

        ssn
            

        SSN
            

        String

        dlNumber
            

        DL Number
            

        String

        numberOfAccidents
            

        Number of Accidents
            

        Integer

        numberOfTickets
            

        Number of Tickets
            

        Integer

        creditScore
            

        Credit Score
            

        Integer

    Create a Policy object with the following details:
    Table 5. Policy object details

    Field
        

    Value

    Identifier
        

    Policy

    Label
        

    Policy

    Existing package
        

    org.acme.insurance

    Superclass
        

    java.lang.Object

        Add the following fields to the Policy object:
        Table 6. Policy object fields

        Id
            

        label
            

        Type

        requestDate
            

        Request Date
            

        Date

        policyType
            

        Policy Type
            

        String

        vehicleYear
            

        Vehicle Year
            

        Integer

        price
            

        Price
            

        Integer

        priceDiscount
            

        Price Discount
            

        Integer

        driver
            

        Driver
            

        org.acme.insurance.Driver

    Click Save.

Congratulation! Using the Data Modeler of the BPM Suite 6 BPM Console you have now created the required data objects that will be used throughout the labs of this course.
    It is likely that at this point JBDS will be complaining about unresolved org.kie and org.drools classes. Changes will be made to the pom.xml of the next lab that alleviate these errors in JBDS and allow our KIE project to be built




DRL Rules Lab
Table of Contents

    1. Pull From Remote Repo
    2. Add Drools and JUnit Maven Dependencies
    3. Update Domain Model Classes
    4. The Business Rules
    5. Rule Structure
    6. Add New Rules
    7. Testing Your Rules
        7.1. Testing Extra Credit
    8. Commit and Push Your Changes

Goal:

Create a set of rules to calculate the quote price for a car policy.
1. Pull From Remote Repo

In this lab a set of rules will be created in your local JBoss Developer Studio environment.

These rules reference the domain model classes (Rejection, Driver, and Policy) that were previously created using the data modeler from BPM Suite. Subsequently, you need to update your local insurancepolicy Git repository with the latest changes committed in your remote insurancepolicy Git repository.

    In JBoss Developer Studio, navigate to the Git Repository Exploring perspective.

    Right-click the insurancepolicy Git repository and select Pull.

    While still in the Git Repositories panel, expand the following: insurancepolicy -> Working Directory -> policyquote -> src -> main -> java -> org -> acme -> insurance

    Observe the inclusion of the Rejection, Driver, and Policy Java classes created in the previous lab using the Data Modeler.
    pulled data

    Switch to the JBoss perspective.

2. Add Drools and JUnit Maven Dependencies

Later in this lab, modifications to Data Objects and execution of Junit test classes will be made. Subsequently, maven dependencies to supported Drools libraries will need to be added to the policyquote/pom.xml of this project.

    In the Project Explorer panel of the JBoss perspective of JBDS, navigate to: policyquote -> pom.xml

    Right-click and select: Open With -> Text Editor

    Fully replace the contents with this pom.xml.

    Spend a few minutes to look over this updated pom.xml.

    Notice the inclusion of the ‘drools’ and kie libraries needed to compile (in your local workstation) the newly created Data Objects.

    Also notice the value of the <drools-version>` property. This drools version corresponds to a version of drools and jbpm libraries only found in the supported maven repository of BPM Suite.

    Save the modified pom.xml

3. Update Domain Model Classes

The previous lab related to the BPM Suite Data Modeler tool provided instructions for creating basic data model classes (aka: domain-model classes). These basic data model classes will assist with the creation of other KIE project artifacts such as rules and business process definitions. It was also mentioned in the previous lab instructions that the BPM Suite Data Modeler is not a full-blown IDE and is instead intented for use by non-developers and analysts.

Now that these data model classes have been pulled to your local JBoss Developer Studio, they can be modified with more advanced features not available through the Data Modeler. After modification, these data modeler classes will subsequently be pushed back to the insurancepolicy git repository of BPM Suite. Once that occurs, the BPM Suite Data Modeler will detect the modification by an external tool of the data model classes. The behavior of the Data Modeler when it
detects data model classes modified by an external tool is that it will present these modified data model classes in read-only mode. By doing so, this prevents the possibility of loss and over-writing of these advanced modifications to the data model classes by the Data Modeler.

To facilitate troubleshooting in subsequent modules of this course, add a meaningful toString() function to your newly created Policy and Driver classes. To do so, execute the following:

    In JBoss Developer Studio, return to the JBoss perspective.

    In Package Explorer, navigate to policyquote and then to src/main/java/org/acme/insurance.

    Its possible that the newly created data objects are showing class resolution errors






RETE Lab
Table of Contents

    1. Understand the Rete Tree View
    2. Examine the Audit Log
    3. Debug a Drools JUnit Test

Goal:

Examine the policy quote rules using the Rete Tree view and the audit log.
1. Understand the Rete Tree View

    In JBoss Developer Studio, use the JBoss perspective to open the following file:

    policyquote/src/main/resources/org/acme/insurance/policyquote/SafeAdults.drl

    In the DRL text editor, click the Rete Tree tab.

    Examine the Rete Tree view and notice the different colored nodes:

        Red = object type node

        Blue = alpha node

        Yellow = left input adapter node

        Green = join node

        Black = terminal node

    Click a node to view info in the Properties panel (such as constraint, type, etc.).

    Identify each type of node by clicking it. To see the rule name, click the black node.

    In the DRL text editor, remove the constraint on the Driver fact for age > 24.

    Switch to the Rete Tree and observe that an alpha node was removed.

    Reenter the age > 24 constraint.

2. Examine the Audit Log

    Open PolicyQuoteRulesTest.java and look for the klogger statement variable.

    klogger = KieServices.Factory.get().getLoggers().newFileLogger(ksession, "src/test/java/org/acme/insurance/policyquote/policyQuote");

    Notice the location that the rules engine logs its actions:

    src/test/java/org/acme/insurance/policyquote.

    Rerun the test class.

    Open the Audit view by selecting Window → Show View → Other → Drools → Audit.

    Click Open Log.

    Browse to the src/test/java/org/acme/insurance/policyquote directory, and open the policyQuote.log file.
    audit

    The log shows rule engine events from the last run in the order in which they happened.

    Click an Activation executed node to see what caused it. (You can also right-click and select Show Cause.) Activation is normally the result of an object assertion.

    Recall that an activation is a rule that is ready to fire for a tuple of facts. When a rule consequence fires, it appears as an Activation executed node. Any resulting working memory actions (such as assertions) are indicated.
3. Debug a Drools JUnit Test

    Set a breakpoint on the consequence of one of the rules, such as on the modify statement. To achieve this in JBoss Developer Studio, double-click the margin. A blue dot appears in the margin as shown below.
    setBreakpoint
    Figure 1. Modify statement with blue dot in margin

    Debug the test class as a Drools JUnit Test.

    Select PolicyQuoteRulesTest.java, and then right-click Debug As → Drools JUnit Test.




Guided Rule Editor
Table of Contents

    1. Modify package-names-white-list
    2. Add a Rule Package
    3. Create Exclusion Rules
        3.1. Overview
        3.2. Create TooYoung exclusion rule
        3.3. Create Other Exclusion rules
        3.4. Build the Package
    4. About the Artifact Repository
    5. About Deployments

Goal:

In the lab for the DRL module of this course, 4 Drools rules were created in JBoss Developer Studio.

In this lab, more new Drools rules will be created.

However, the tool to create these rules will be the web-based Guided Rule Editor of BPM Suite 6.
1. Modify package-names-white-list

BPM Suite offers the ability to specify a white-list of packages that can contain data model classes for use in various BPM design-time tooling such as the Guided Rule Editor.

The default package that is white-listed in our existing policyquote project is: org.acme.insurance.policyquote.** . Because our previously created data objects (Rejection, Policy & Driver) have a package name of org.acme.insurance, these objects are excluded by use in the Guided Rule Editor. In this section of the lab, let’s modify the package-names-white-list.

    In the BPM Console, navigate to: Authoring -> Administration.

    In the File Explorer, navigate to: Repositories -> insurancepolicy -> policyquote.
    file explorer

    Click the file: package-names-white-list.

    Below the existing white-list entry, add a new line with the following:

    org.acme.insurance.**

    white list mod

    Save the change.

2. Add a Rule Package

The rule package is the deployment unit for a set of related rules.

In the lab for the DRL module of this course, the rule package used was: org.acme.insurance.policyquote. In this lab, the rule package used by rules created by the Guided Rule Editor will be: org.acme.insurance.pricing

    Using your browser, navigate back to the BPM Central web application of your online lab environment.

    To create a new package, click Authoring → Project Authoring.

    In the Project Explorer panel, select insurance.

    Click New Item → Package.

    Give it the name exclusion.

    Click Ok.
    package exclusion
    Figure 1. Project Explorer panel

3. Create Exclusion Rules
3.1. Overview

Use the Guided Rule Editor to create several exclusion rules. The hypothetical business purpose of these exclusion rules is to reject an insurance policy application for any of the following reasons:

    Driver’s age is less than 18

    Driver’s age is greater than 100

    Driver has been involved in more than 4 accidents

    Driver has obtained greater than 6 traffic tickets

3.2. Create TooYoung exclusion rule

Using the Guided Rule Editor, create the first exclusion rule called: TooYoung. Ultimately, this is what the rule will look like in the Guided Rule Edtior:
guidedRuleEditor

Procedure as follows:

    Select the exclusion package you just created.

    Click New Item → Guided Rule.

    Enter the name TooYoung and click OK
    new rule

    Specify the Data Objects to import:

        Click the Config tab at the lower end of the new Guided Rule Editor panel.

        Click New Item.

        Select org.acme.insurance.Driver and click OK
            The previously created data objects (Reject, Policy & Driver) will appear in the drop-down list as options if the package-names-white-list was correctly modified.

        Repeat for org.acme.insurance.Rejection.
        imports7

    Create the WHEN clause of the rule:

        In the Guided Rule Editor panel, return back to the the Editor tab.

        On the WHEN line, click greenPlus.

        In the dialog box, select Driver ..., and then click Ok.

        Click the There is a Driver link (hint: hover over the text) to open the edit dialog box.

        In the Add a restriction on a field list, select age.

        In the age field you just added, select less than.

        Click pencil to the right of the selection box.

        In the Field value dialog box, click Literal value, and then enter 18 as the value to complete the WHEN clause:
        fieldbox
            If you make a mistake, click delete_button to the right.

    Create the THEN clause of rule

        On the THEN line, click greenPlus.

        On the Add New Action pop-up, select: Insert Fact Rejection and click OK

        Click on the Insert Rejection link (hint: hover over the text)

        Select reason from the Add Field drop-down

        Click pencil to the right of the reason text.

        In the Field value dialog box, click Literal value, and then enter Too Young as the value
        thenclause

        As a second action in the then clause, click greenPlusDown.

        Select Add free form DRL -> OK

        In the next text box, add the following code snippet:

        System.out.println("fired rule " + kcontext.getRule().getName());

        too young

    In the top tool-bar of the Guided Rule Editor panel, Click Validate.

    In the same tool-bar, click Save.

3.3. Create Other Exclusion rules

    Create 3 other rules using the Guided Rule Editor following the guidelines listed here:
    Table 1. Exclusion rules

    Rule Name
        

    Condition
        

    Action`

    TooOld
        

    If the driver age is greater than 100
        

    Then reject with reason Too Old

    TooManyAccidents
        

    If the driver numberOfAccidents is greater than 4
        

    Then reject with reason Too Many Accidents

    TooManyTickets
        

    If the driver numberOfTickets is greater than 6
        

    Then reject with reason Too Many Tickets

    Remember to click Validate and Save after you finish each rule.

    You should now have four rules in the org.acme.insurance.exclusion package
    final exclusion

3.4. Build the Package

After you create the four rules in the previous section, build the package as follows:

    Click Authoring → Project Authoring.

    Below the Project Explorer panel, click Open Project Editor

    Click Save.

    From the Build drop-down, Click Build & Deploy.
    bd

    Click Yes.

4. About the Artifact Repository

In the previous exercise, the Build & Deploy step created a KJar (otherwise known as a Deployment Unit) from your policyquote project. As discussed in previous modules of this course, KJars are Mavenized libraries.

This kjar was added to the BPM Suite 6 Artifact Repository.

You can think of the Artifact Repository as a mavenized staging area of kjars that can be subsequently deployed to the BPM Suite 6 rule and process engines.

To view the entry in the Artifact Repository, click: Authoring -> Artifact Repository
ar
5. About Deployments

The Build & Deploy step also deployed the kjar to a BPM Suite 6 rules engine. At this point, the engine could begin to accept requests for insertion of facts and firing of the fules included in our policyquote project.

To view this new Deployment Unit navigate to Deploy → Process Deployments.



Decision Table Lab
Table of Contents

    1. Overview
    2. Business Use-Case
    3. Create a New Decision Table
    4. Import Data Objects
    5. Create Condition Columns
        5.1. Driver conditions
        5.2. Policy conditions
    6. Create Action Column
    7. Create Attribute Column
    8. Price Discount Rules
        8.1. Overview
        8.2. Create Rules
        8.3. Validate and Save
    9. Understand Your Rules

Goal:

Use a Guided Decision Table to create decision table rules.
1. Overview

Decision tables use a spreadsheet-like format and provide another way to author rules. This method is especially useful when needing to create lots of rules that are similar in nature.

BPM Suite supports decision tables written in a spreadsheet (Excel, OpenOffice), as well as a web-based Guided Decision Table Editor. In this lab, you will use the web-based decision table editor to author rules.
2. Business Use-Case

The new rules created in this lab using the web-based Guided Decision Table Editor will determine a price discount level on an auto policy quote.

The criteria for determining the price discount level will be based strictly on the driver’s credit score level.

The better the applicant’s credit score, the higher the discount applied to the final insurance policy quote.
3. Create a New Decision Table

    Using your browser, navigate to the BPM Console of your online BPM Suite lab environment.

    Open the Projects page by selecting Authoring → Project Authoring.

    In Project Explorer, navigate to the org.acme.insurance.policyquote package.

    This package should already include the original four DRL rules created using the drools plugin of JBDS.

    All new rules generated in this lab by the Guided Decision Table editor will be added to this package.

    Select New Item → Guided Decision Table.

        In the pop-up window, enter CreditScoreDiscount as the table name.

        Check Extended entry, values defined in table body.
        newdtable

    Click Ok.

4. Import Data Objects

The first step in creating a batch of new similar rules via the Guided Decision Table Editor is to specify the import statements of Data Objects.

This step is similar to what was needed when creating individual rules using the Guided Rule Editor.

    In the bottom tool-bar of the Guided Decision Table panel, Click the Config tab.

    Click New Item.

    Select org.acme.insurance.Driver.

    Repeat these steps to import org.acme.insurance.Policy.
    imports8

5. Create Condition Columns

Conditions created through the Guided Decision Table Editor define constraints on data object fields that will be similar across a large set of rules.

An example condition might be: ( driver.creditScore > 700 )

These conditions will appear as the columns in the Guided Decision Table (populated later in this lab).

Ultimately, these conditions will be used to easily auto-generate the left-hand side constraints of our business rules.

    Return to the Editor tab.

    Click the small plus sign to expand the Guided Decision Table options.
    expanddtable

The next two subsections have you create condition columns from fields on Driver and Policy Data Objects.
5.1. Driver conditions

Two condition columns will be defined that apply constraints on the Driver object.

The following grid defines these two Driver related constraints:
Table 1. Driver Condition Constraints   

Pattern (Fact Type / binding)
    

Calculation Type
    

Field
    

Operator
    

Column Header
    

Default value
    

Hide Column

1
    

Driver / driver
    

Literal value
    

creditScore
    

Greater than
    

Min Score
    

Leave blank
    

unchecked

2
    

Driver / driver
    

Literal value
    

creditScore
    

Less than or equal to
    

Max Score
    

Leave blank
    

unchecked
5.1.1. Create Driver conditions

As per the Driver Condition Constraints table, execute the following steps twice: once for each Driver condition constraint

    Click the New Column link

    A pop-up will appear entitled: Add a new column

        Click Add a simple condition

        click OK

    A new pop-up will appear entitled: Condition column configuration

        Click the pencil adjacent to Pattern

        A new pop-up will appear called Create a new Fact pattern
        newfact

            For the value of Fact type, select Driver.

            For the value of Binding, type driver

            Click OK
                When creating the second Driver constraint, the pop-up will be called Fact type. This pop-up will allow you to select the Driver type that was already defined when having created the first Driver constraint.
            dfacttype

        As per the Driver Condition Constraints table, populate the rest of the fields of the Condition column configuration pop-up.
        minscore

        This is what the values of the pop-up should look like when creating the first Condition Constraint on the Driver data object.

        Once this pop-up is populated, Click OK.

5.1.2. View Driver conditions

    Expand the Condition columns section of the Decision Table panel.

    Notice the existence of the two Driver related conditions: Min score and Max Score
    minscorecompleted

    Also notice that these two conditions have appeared as columns in what eventually will be our Decision Table

5.2. Policy conditions

Create two more column conditions based on the Policy data object.
Table 2. Policy Condition Constraints   

Pattern (Fact Type / binding)
    

Calculation Type
    

Field
    

Operator
    

Column Header
    

Default value
    

Hide Column

1
    

Policy / policy
    

Literal value
    

price
    

Greater than
    

Price
    

0
    

Check

2
    

Policy / policy
    

Literal value
    

policyType
    

Equal to
    

Policy Type
    

AUTO
    

Check

Use the values found in the Policy Condition Constraints table to create these two additional constraints.

The one deviation from the steps utilized to create the Policy Condition constraints is when specifying the Pattern: pencil for the first Policy condition.

You will want to click the Create new fact pattern button and in the pop-up specify:

    Fact type : Policy

    Binding : policy

pfacttype
6. Create Action Column

In the previous sections of the lab, condition columns were created that ultimately will be used in the left-hand side of our rules.

In this section of the lab, an action column will be created that will ultimately be used in the right-hand side of our rules.

    Click New column, and select Set the value of a field as the column type.

    A pop-up will appear entitled Column configuration

    Create the action column based on the values from the following table.
    Table 3. Action column

    Fact
        

    Field
        

    Column Header
        

    Update Engine with changes

    policy
        

    priceDiscount
        

    Price Discount
        

    check
    consequence

7. Create Attribute Column

Rule attributes can also be defined across a large set of rules using the Guided Decision Table Editor.

In this section of the lab, an attribute column will be created that will ultimately be used to set the no-loop attribute on all rules.

When a rule’s consequence modifies a fact, the consequence may cause the rule to activate again. This can cause an infinite loop. Setting the no-loop attribute to true prevents another activation of the rule with the current set of facts.

To add the no-loop attribute:

    Click New column.

    Select Add a new Metadata/Attribute column as the column type.

    A pop-up will appear entitled: Add an option to the rule

        in the attribute drop-down, select no-loop

    The pop-up will close and in the options section of the Guided Decision Table Editor, Check the box for Default value.
    option

Congratulations! You’ve created all of the needed columns for your Decision Table.

Your Guided Decision Table Editor should appear as follows:
donecolumns
8. Price Discount Rules
8.1. Overview

Now that all of the columns of your decision table are created, creating a batch of rules is quick and easy.

In this section of the lab, 4 new rules will be created using the data in the following table:
Table 4. Rule values    

Description
    

No Loop
    

Min Score
    

Max Score
    

Price Discount

1
    

bad credit
    

Checked
    

0
    

400
    

0

2
    

good credit
    

Checked
    

400
    

600
    

10

3
    

very good credit
    

Checked
    

600
    

700
    

25

4
    

excellent credit
    

Checked
    

700
    

Leave blank
    

50
8.2. Create Rules

Execute this section a total of 4 times: once per rule as per guidence provided in the Rule values table.

    Below the various columns sections of the Guided Decision Table Editor, click Add row.
    addrow

    You’ll notice the new entry of a blank row in the decision table.

    Enter the appropriate values of each new rule as per the Rule values table.

Your finished table should resemble the following:
lab brms 12
Figure 1. Credit score decision table
8.3. Validate and Save

    In the top tool-bar of the Guided Decision Table Editor, click Validate.

    Click Save

9. Understand Your Rules

In the bottom tool-bar of the Guided Decision Table Editor, click the Source tab to see the completed DRL source for this decision table.

    How many rules exist ?

    For each rule, what are the left-hand side conditions ?

    What are the right-hand side consequences ?

    What attribute is applied across all rules ?


Test Scenarios Lab
Table of Contents

    1. Overview
    2. Create a New Test
    3. Import Dependencies
    4. Define the Test
        4.1. Define a Driver object
        4.2. Define expected results
    5. Execute the Test
    6. Suggestions

Goal:

Use the Test Scenarios feature of the BPM Console to create and execute a few test scenarios. These test scenarios will validate correct behavior of your rules in isolation from eachother.
1. Overview

Just like regular code, you should test rules to make sure they produce the desired result. When using JBoss Developer Studio to author rules, you can test rules with plain Java unit tests using JUnit or TestNG. JBoss BPM Suite 6 also has facilities to define test scenarios against rules.
2. Create a New Test

Your first task is to write a test for your TooYoung rule.

    Open the Projects page of the web based BPM Console by selecting Authoring → Project Authoring.

    In Project Explorer, navigate to the org.acme.insurance.policyquote.exclusion folder.

    Select New Item → Test Scenario.

    In the pop-up window, enter TooYoungTest as the name of the test.

    Click Ok.

3. Import Dependencies

Similar to when rules were created, the first step when creating test scenarios is to define imports on data objects.

    Click the Config tab.

    Click New Item.

    Select org.acme.insurance.Driver.

    Repeat these steps for org.acme.insurance.Policy and org.acme.insurance.Rejection.

imports9
4. Define the Test

In a typical test, you provide some data and describe what you expect when the rule(s) execute.
4.1. Define a Driver object

For the purposes of the new Test Scenario, let’s define a new Driver with an age of 14. When we execute the test scenario we’d obviously expect that our TooYoung exclusion rule will detect the presence of this Driver and insert a Rejection object into the rules engine working memory.

    Go back to the Test Scenario tab.

    Click the greenPlus icon next to Given.

    In the Insert a new fact list, select Driver, and give it a fact name of: driver.
    new input

    Click Add.

    In the Test Scenario Editor panel, click the link: Add a field (hint: hover over the text)`
    addfield

    In the Choose a field to add pop-up, select age.

    Click pencil to the right of age

    Select Literal value and enter 14 in the text box.

4.2. Define expected results

    Click the greenPlus icon next to Expect.

    In the Any fact that matches list, select Rejection.
    newexpect

    Click Add.

    Click the link called: A fact of type Rejection has values, and select reason from the list.
    rejection

    In the reason list, select equals, and enter Too Young in the text box.

    Because you want to test your rule in isolation, specify that the rule TooYoung should fire at least once:

        Next to configuration, select Allow these rules to fire:.

        Click the greenPlus icon to select the TooYoung rule.

Once the expected results section is completed your test should resemble the following:
TooYoungTest
Figure 1. Too-Young test
5. Execute the Test

    Click Save to save the test scenario.

    Click Run scenario to run this test.

    Look in the Reporting panel for a Success message. If there are test errors, fix the test or the rule you are testing.

    If you are monitoring the log file of your BPM server, notice the entry of a log similar to the following:

    15:51:42,778 INFO  [stdout] (http-bizlogicdev/192.168.122.125:8080-5) fired rule TooYoung

6. Suggestions

Congratulations creating the initial TooYoung test. If interested, create other test scenarios that test the other three rules in the org.acme.insurance.exclusion package`.
    To run all tests at once, select the All Test Scenarios tab, and click Run all scenarios.



Domain Specific Language Lab
Domain Specific Languages in JBoss BPM Suite 6 act as a stylesheet for rules.A DSL enables you to express your rules in a more natural language.
Table of Contents

    1. The Mapping File
    2. The Surcharge Rules
        2.1. Overview
        2.2. Create Rule Using the DSL
        2.3. Validate and Save the new Rule
        2.4. Create two other surcharge rules

To do so, you need a mapping file that maps technical rule expression fragments to natural language constructs.
Goal:

Learn how to use the web based DSL Editor of JBoss BPM Suite 6.

A single DSL mapping file along with 3 new rules will be created.
1. The Mapping File

A DSL mapping file was prepared for you, so you can import this into your project.

    Open the Projects page of the web based BPM Console by selecting Authoring → Project Authoring.

    In Project Explorer, navigate to the org.acme.insurance.policyquote folder.

    Select New Item → DSL definition.

    In the pop-up window, enter Acme as the name of the DSL mapping file.

    Click Ok.

    Copy the contents of the Acme.dsl and paste it into the DSL editor pane.

    Examine the DSL mappings.

    Click Validate and then click Save.

2. The Surcharge Rules

Now you can express some rules using your DSL.
2.1. Overview

The business use case of the new rules created in this lab is to apply, under certain conditions, a surcharge to the policy quote. For example, a surcharge should be applied to the policy quote for very young drivers or for newer vehicles.

In this section of the lab, you will be creating the following 3 new rules:
Table 1. DSL Rules  

Rule Name
    

Condition
    

Action

1
    

AccidentSurcharge
    

If the driver has numberOfAccidents > 2 and there is a policy with price > 0 and policyType = "AUTO"
    

Then price = price + 200

2
    

NoviceDriverSurcharge
    

If the driver has age < 20 and there is a policy with price > 0 and policyType = "AUTO"
    

Then price = price + 250

3
    

NewerVehicleSurcharge
    

If the vehicle year (on the policy) is >= 2004 and there is a policy with price > 0 and policyType = "AUTO"
    

Then price = price + 100

You will want to repeat the next section 3 times; one per rule as defined in the DSL Rules table.
2.2. Create Rule Using the DSL

    Select New item → Guided Rule.

    Fill-in the pop-up window as follows:

        Enter the rule name as per the DSL Rules table (ie: AccidentSurcharge).

        Check the Use Domain Specific Language (DSL) box.

        Click Ok.

    Specify the import dependencies as follows:

        Click the Config tab.

        Click New Item.

        Select org.acme.insurance.Driver.

        Repeat these steps for org.acme.insurance.Policy

    Add rules using the DSL:

        Return to the Editor tab

        Driver constraints

            Click the greenPlus icon on the WHEN line to add conditions.

            Observe that you now have a lot more choices.

            Select There is a Driver and click OK

            Click the greenPlus icon again to add additional constraints on the driver as per the guidance given in the DSL Rules table. For example, for the first rule:

                Select - has had more than {number} number of accidents.

                In the text box, replace {number} with 2.
                driverconstraint

        Policy constraints

            Click the greenPlus icon, and select There is a Policy.

            Click the greenPlus icon again to add additional constraints on the policy as per the guidance given in the DSL Rules table. For example, for the first rule:

                Add a conditions that the Policy has type AUTO and the price is greater than zero.
                policyconstraint

        Add right-hand side consequence

            Click the lowest greenPlus icon (adjacent to the THEN text) to add an action.

            Populate as per guideance provided in the DSL Rules table. For example, for the first rule:

                Select Add surcharge {surcharge} to Policy.

                In the text box, replace {surcharge} with 200
                action

                Add an additional right-hand side consequence of: logRule.

    Add attributes to the rule:

        Click (show options).

        Click the greenPlus icon next to (options).

        Select the no-loop attribute.

        Check the no-loop box.

        Repeat the same steps for lock-on-acti

        When you add ruleflow in a later lab, you can use the lock-on-active attribute to eliminate looping between surcharge rules and to prevent multiple surcharges from being added.

2.3. Validate and Save the new Rule

    Click Validate and then click Save.

    Your rule should resemble the following:
    lab brms 14
    Figure 1. AccidentSurcharge Rule

2.4. Create two other surcharge rules

Refer to the DSL Rules table to create the NoviceDriverSurcharge and NewerVehicleSurcharge rules.

Congratulations! You’ve created three new Surcharge rules using a business-user friendlt Domain Specific Langugage.




Advanced Rules
Until now, the rules you expressed in the labs were fairly simple. To solve more complex requirements, the DRL language also allows the expression of higher order logical constructs. For example, a driver can apply for more than one car insurance policy, so you need the ability to capture the sum of the calculated prices of the individual policies and store this in a master policy.You can do this in DRL with the `accumulate` function.
Table of Contents

    1. The accumulate Function
    2. Test the New Accumulate Rule
        2.1. Test correct price and price discount values
        2.2. Test correct rule firing amounts

Goal:

Learn how to use advanced language features such as accumulate.
1. The accumulate Function

Here is how to express a rule using the accumulate function.

    Open the Projects page of the web based BPM Console by selecting Authoring → Project Authoring.

    In Project Explorer, navigate to the org.acme.insurance.policyquote folder.

    Select New Item → DRL file.

    In the pop-up window, enter PriceMultipleVehicles as the name of the rule.

    Click Ok.

    Copy and paste the contents of this PriceMultipleVehicles.drl into the DRL Editor.

    Click Validate, and then click Save.

    Does the rule makes sense?

        salience -10

        The salience option determines the priority of the rule compared to other rules. This aggregate rule should fire after all the others. Thus it is given a negative salience (the default value is 0; a higher value means higher priority).

        pMaster: Policy(driver==adriver,policyType=="MASTER",price==null)

        This condition ensures that the rule only fires if the existence of a Policy object with a policyType of MASTER has been inserted into working memory.

        accumulate function

        Recall the syntax for the accumulate function:

        <result pattern>
            from accumulate ( <source pattern>,
                init ( <init code>  ),
                action ( <action code>  ),
                reverse ( <reverse code>  ),
                result ( <result expression>  )
            )

    An explanation of each component of the accumulate function as follows:

        init : The <init code> executes once when the Driver and MASTER Policy objects exist in working memory.

        action : The price value of each AUTO policy that matches the <source pattern> accumulates in the <action code>.

        reverse : The <reverse code> is used only if the facts of the collection of objects for the <source pattern> change before the rule executes.

        result : The result of the <result expression> must satisfy the <result pattern> for this condition of the when clause to be met.

2. Test the New Accumulate Rule

The focus of this section of the lab is to test the behavior of the PriceMultipleVehicles rule previously introduced.

The test begins by testing the affect on the price and price discount fields of various policy object facts when the rules are executed.

Afterwards, expectations are added to the test that validate that certain rules are actually executed a given amount of times.
2.1. Test correct price and price discount values

    Create a new test Scenario and name it: AccumulateTest.

    In the new test, navigate to the config tab and import Driver, Policy, and Number.

    Switch back to the Test Scenario Editor tab

2.1.1. Insert Facts into Test Scenario

    Begin by defining the following facts in your test scenario:
    Table 1. Test Scenario Facts    

    Facts

    1
        

    Driver: d1
    age = 30
    numberOfAccidents = 0
    numberOfTickets = 0
    creditScore=715

    2
        

    Policy: p1
    vehicleYear = 2000
    policyType = AUTO
    driver = d1

    3
        

    Policy: p2
    vehicleYear = 2001
    policyType = AUTO
    driver = d1

    4
        

    Policy: pM
    vehicleYear = 0
    policyType = MASTER
    driver = d1

    Once all facts have been defined as per the Test Scenario Facts table, the Test Scenario panel should appear as follows:
    facts

2.1.2. Define Expected Results

Next step is to define the expected results given the all the rules previously created and the facts inserted in the previous section.

Use the following table as guidance when building the Test Scenario expected results:
Table 2. Expected Results   

Given Facts
    

Expected Results
    

Explanation

1
    

p1
    

price = 120
priceDiscount = 50
    

SafeAdult with excellent credit (as per CreditScoreDiscount)

2
    

p2
    

price = 120
priceDiscount = 50
    

SafeAdult with excellent credit (as per CreditScoreDiscount)

3
    

pM
    

price = 240
    

Price aggregate as per PriceMultipleVehicles
    To establish the relationship between the driver and the policy, select Bound variable as the value for the driver field.

The Expected results of your test should appear as follows:
lab brms 16
Figure 1. Test scenario Expected parameters
2.1.3. Execute Test

Execute the test by clicking Run scenario

You should see in the Reporting panel a green message indicating Success.
2.2. Test correct rule firing amounts

In this section of the lab, add expectation clauses to the test that validate that specified rules are in fact being executed.

    In the AccumulateTest, click on the green plus adjacent to the Expect text.

    In the pop-up that appears, select the Row 4 CreditScoreDiscount rule from the drop-down labelled: please choose
    selectrule

    The value for the Rule text box should now be populated with Row 4 CreditScoreDiscount.

    Press OK on the pop-up.

    Adjacent to the new Row 4 CreditScoreDiscount expectation is a drop-down with one of its options being: fired this many times.

    Select this option from the drop-down and set a value of: 2

    Repeat this procedure by adding an additional Expect clause where the SafeAdults rule fires 2 times.

    Repeat this procedure a final time by adding an additional Expect clause where the PriceMultipleVehicles rule fires at least once.

    Save the AccumulateTest

    The expectations section of the test should appear as follows:
    finalexpectation

    Re-run the test by clicking Run scenario.




Complex Event Processing Lab
.Goal:* Use the rule engine to reason over events with the tools provided by JBoss Developer Studio and stream processing.
Table of Contents

    1. Prepare PolicyQuote project in JBDS
        1.1. Import New Domain Class
        1.2. Import CEP Rules
        1.3. Import CEP JUnit Test
    2. Default Test Scenario
        2.1. Overview
        2.2. Execute Default Scenario
    3. Make Requested Changes
        3.1. Scenario 2: Add Entry Points
        3.2. Scenario 3: Shrink the Timeframe
        3.3. Scenario 4: Use a Real-Time Test
    4. Disgard Local Changes in insurancepolicy project

1. Prepare PolicyQuote project in JBDS

In this lab, you will create and execute CEP-related functionality in JBoss Developer Studio. For the purpose of this specific lab, the BPM Suite server is not utilized.

    Using the eGit plugin of JBoss Developer Studio, pull the latest files from the insurancepolicy Git repository of your remote online lab environment.
        Refer to the lab for module 05_DRL for a refresher on how to sync your local enviornment from the latest in the Git repo of your remote BPM environment.

    Open the Project Explorer panel of the JBoss perspective of JBDS.

    Open the src/main/resources/META-INF/kmodule.xml file of your policyquote project.

    Create a specific KieSession to run your tests by editing your file to match the following:

    <kmodule xmlns="http://jboss.org/kie/6.0.0/kmodule" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

        <kbase name="insuranceKB" packages="org.acme.insurance.monitoring" eventProcessingMode="stream">
          <ksession name="insuranceKS" clockType="pseudo" default="true" />
          <!-- ksession name="insuranceKS" clockType="realtime" default="true" / -->
        </kbase>
    </kmodule>

    Notice the introduction of an attribute called eventProcessingMode whose value is set to stream. This enables the CEP functionality of the Drools Rules Engine.
        Be especially careful about any special/hidden characters that might be introduced when you copy the above code to your kmodule.xml. Use a text editor that displays all actual characters in the file—for example, vim in OS X/Linux—to verify the contents of your kmodule.xml. Feel free to use the kmodule.xml included in the solution repo rather than copy-n-paste.

1.1. Import New Domain Class

    The lab assets for this module include an additional domain class called: PolicyBinding.java.

    Download PolicyBinding.java to the src/main/java/org/acme/insurance/ folder of the policyquote project in JBoss Developer Studio.

    Press F5 to refresh your JBoss Developer Studio project.

    Open the PolicyBinding.java file and observe how the new domain class is structured.

1.2. Import CEP Rules

    Create the following new directories in your policyquote project:

        src/main/resources/org/acme/insurance/monitoring

        src/test/java/org/acme/insurance/monitoring

    Download policyreserve.drl to the src/main/resources/org/acme/insurance/monitoring folder in the JBoss Developer Studio project.

    Press F5 to refresh your JBoss Developer Studio project.

    Open policyreserve.drl to review the CEP rules.

    Read the comments for both of the following rules:

        exceedThreshold

        withinThreshold

1.3. Import CEP JUnit Test

    The lab assets for this module include a test class called: PolicyBindingRulesTest.java.

    Download PolicyBindingRulesTest.java to the src/test/java/org/acme/insurance/monitoring folder in the JBoss Developer Studio project.

    Press F5 to refresh your JBoss Developer Studio project.

    Make sure that the junit and drools-compiler Maven dependencies in the policyquote/pom.xml (which you added in the lab for module 5, DRL) are un-commented

    Open PolicyBindingRulesTest.java to review the ThresholdTest.

2. Default Test Scenario
2.1. Overview

The default settings of scenario 1 are as follows:

    Session Entry Point: none.

    Any PolicyBinding object inserted into working memory is evaluated.

    Time Unit : set to minutes

    Clock Type : psuedo clock

2.2. Execute Default Scenario

    In the Project Explorer panel, navigate to the PolicyBindingRulesTest and right-click

    select: Run As → JUnit Test
        This test could optionally also be executed at the command line as follows: mvn -Dtest=org.acme.insurance.monitoring.PolicyBindingRulesTest test

    Observe the results in the JBoss Developer Studio Console window.




RuleFow Lab
Table of Contents

    1. Create a New Business Process
    2. Set Properties and Imports for the Diagram
    3. Add the Start Event Node and Task
    4. Create a Conditional Business Process Flow
    5. Add Additional Business Rule Tasks
    6. Add Ruleflow Groups to Rules
        6.1. Modify Business Rules
        6.2. Modify Decision Table rules
        6.3. Modify Technical Rules
    7. Test the RuleFlow
        7.1. Add a Rule to Trigger the RuleFlow
        7.2. Execute AccumulateTest Scenario

Goal:

Learn how to use ruleflow to control the sequence of rule execution.

With this and the remaining labs, your focus transitions from rules management to Business Process Model and Notation 2 (BPMN2) and control.

In this lab, you will create a BPMN2 process definition that appears as follows:
calcDiagram
1. Create a New Business Process

Create a new business process to manage ruleflow using the Process Designer (also called Web Designer).

    In the BPM Console of BPM Suite 6, click Authoring → Project Authoring.

    On the Project Explorer screen, navigate to the org.acme.insurance.policyquote folder.

    Click New Item → Business Process.

    On the screen that appears, in the Name field, enter policyquotecalculationprocess.

    Click Ok.

    You are now viewing the BPMN2 Designer which allows for the creation of BPMN2 process definitions.

2. Set Properties and Imports for the Diagram

In this section, you’ll add properties such as id and package as well as import statements. The value of the id property for the diagram is important. As you will see in a later lab, you can use the Id value to execute this business process.

    Click anywhere on the canvas, and then click the << icon in the upper-right corner of the screen to open the Properties panel.

    Verify that the Id property of the process to is set to policyquote.policyquotecalculationprocess.

    Change the Package property to org.acme.insurance.policyquote.

    On the Properties panel, click the Imports drop-down arrow.

    On the screen that appears, click Add Import

    Using default as the type, create the following imports:

        org.acme.insurance.Driver

        org.acme.insurance.Policy

        org.acme.insurance.Rejection
        addImportsDialog
        Figure 1. Imports editor screen

    Click Ok.

3. Add the Start Event Node and Task

An event is something that happens during the course of a process. Events affect the flow of the process, usually have a cause or an impact, and generally require or allow for a reaction.

A task is an atomic activity in a BPMN2 process.

    Click the >> icon in the upper-left corner of the drawing palette to open the Object Library screen.

    Open the Start Events palette and drag a None icon onto the drawing palette.
        If your diagram already has a start event on the palette, skip this step.

    With the Start Event icon selected, observe the shortcut items that appear next to the start node:
    shortcutPallet
    Figure 2. Shortcut palette

    Click the icon that is square with rounded corners.

    With the new task node selected, click the << icon in the upper-right corner of the drawing palette to open the Properties panel.

    Under Core Properties, change the name of the task to Rejection.

    For the Task Type, select Business Rule.

    For the RuleFlow Group property, set the value to rejection.

4. Create a Conditional Business Process Flow

    Create two gateways:

        Select the Rejection task.

        Click Data-based Exclusive (XOR) Gateway exclusiveOr or drag it from the palette, and place it to the right of the Rejection task.

        On the Properties panel, for the Exclusive Or gateway name, enter Gateway.

        With Exclusive Or selected, drag a second Exclusive Or gateway to the right, and drop it on the canvas.

        Provide some extra space between the two gateways—see Figure 3 below for an example.

        On the Properties panel, for the Exclusive Or gateway name, enter Join Gateway.

    With the second Exclusive Or gateway selected, select the circle icon that does not have a double line around it from the shortcut palette; this is the End Event icon.

    Add a Calculation task and properties:

        Select the first Exclusive Or gateway again. Drag the Task icon from the shortcut palette and drop it onto the canvas under the sequence line that connects the two gateways.

        With this task node selected, go to the Properties (Task) panel on the right.

        Select Business Rule for the Task Type and name it Calculation.

        Find the RuleFlow Group property and set the value to calculation.

    Select the sequence flow between the first Exclusive Or gateway and the Calculation task:

        On the Properties (Sequence Flow) panel on the right, populate as follows:
        sequence flow

            select Drools for the Condition Expression Language

            enter not Rejection() for the Condition Expression.

            Enter Non Rejection for the Name property

            Use a value of 1 for the Priority property.
                When using the XOR type, the route with the lowest priority value is evaluated first.

        For the sequence flow between the two gateways, populate as follows:

            Select Drools again for the Condition Expression Language

            Enter Rejection() for the Condition Expression.

            Enter Rejection for the Name property

            Use a value of 2 for the Priority property.

5. Add Additional Business Rule Tasks

    Add a Surcharge task and properties:

        Select the Calculation task. Click another Task icon from the shortcut palette.

        With this task node selected, go to the Properties (Task) panel on the right.

        Add the following properties to the new task node:
        Table 1. Surcharge task properties

        Property
            

        Value

        Name
            

        Surcharge

        RuleFlow Group
            

        surcharge

        Task Type
            

        Business Rule

    Add a Discount task and properties:

        Click the Surcharge task. Click another Task icon from the shortcut palette.

        With this task node selected, go to the Properties (Task) panel on the right.

        Add the following properties to the new task node:
        Table 2. Discount task properties

        Property
            

        Value

        Name
            

        Discount

        RuleFlow Group
            

        discount

        Task Type
            

        Business Rule

    Add a Total task and properties:

        Click the Discount task. Click another Task icon from the shortcut palette.

        With this task node selected, go to the Properties (Task) panel on the right.

        Add the following properties to the new task node:
        Table 3. Total task properties

        Property
            

        Value

        Name
            

        Total

        RuleFlow Group
            

        total

        Task Type
            

        Business Rule

    On the diagram, click the Total task.

    Drag the sequence line from the shortcut palette to the second Exclusive Or gateway.
        Wait until the red highlights turn green before you drop the line.

    At the conclusion of having added these additional business rule tasks, your process diagram should resemble the following:
    calcDiagram
    Figure 3. Policy quote process diagram

    Save the Process

6. Add Ruleflow Groups to Rules

Thus far you have created a policyquotecalculationprocess BPMN2, which includes Business Rule tasks. Each of these Business Rule tasks specifies a Ruleflow group. To trigger the appropriate rules when each Business Rule task in the BPMN2 is invoked, you need to add a ruleflow-group attribute to each rule.

For each Business Rule, Decision Table rule, and technical rule in the policyquote project, do the following:

    Add the ruleflow-group attribute listed in the subsections below.

    Click Validate to ensure correctness of the rule.

    Click Save.

6.1. Modify Business Rules

Many of your rules are written using the Guided Rule Editor (and in the case of the Surcharge rules, those are written using the DSL variant of the Guided Rule Editor).

Add a ruleflow-group to these business rules as per the Business Rule ruleflow-group mapping table.
Table 4. Business Rule ruleflow-group mapping

Business Rule Name
    

Ruleflow Group Assignment

AccidentSurcharge
    

surcharge

NewerVehicleSurcharge
    

surcharge

NoviceDriverSurcharge
    

surcharge

TooManyAccidents
    

rejection

TooManyTickets
    

rejection

TooOld
    

rejection

TooYoung
    

rejection

Notice how to do so in the image below:
bizruleflowgroup
6.2. Modify Decision Table rules
Table 5. Decision Table to ruleflow-group mapping

Decision Table Rule Name
    

Ruleflow Group Assignment

CreditScoreDiscount
    

discount
decisiontableruleflowgroup
6.3. Modify Technical Rules

For technical rules, type the options in the lines below the rule name as follows:

    ruleflow-group "ruleflow group assignment as per table below"

Table 6. Technical rule to ruleflow-group mapping

Technical Rule Name
    

Ruleflow Group Assignment

PriceMultipleVehicles
    

total

RiskyAdults
    

calculation

RiskyYouths
    

calculation

SafeAdults
    

calculation

SafeYouths
    

calculation
techruleflowgroup
7. Test the RuleFlow

Congratulations! You’ve created a new BPMN2 business process with Business Rule tasks. You’ve also assigned all business rules to a specific ruleflow group.

Prior to deploying and executing the new BPM artifacts, let’s create a test scenario that ensures correct behavior.
7.1. Add a Rule to Trigger the RuleFlow

Now that all of the rules are assigned a ruleflow-group, they will not trigger unless the rules engine is explicity instructed to execute using those specific ruleflow-groups.

Since the policyquotecalculationprocess BPMN2 process is already written to invoke the ruleflow-groups, executing the BPMN2 process becomes a handy mechanism to test the behavior of the rules in the ruleflow-groups.

For testing purposes, create a rule that triggers the new policyquote.policyquotecalculationprocess process.

In a later lab, you will disable this rule because the policyquotecalculationprocess will actually become a sub-process that will get invoked by its parent.

    In the Project Explorer of BPM Console, navigate to: org.acme.insurance.policyquote.

    Click New Item → DRL File.

    For the resource, in the Name field, enter StartRuleflow.

    Click OK.

    In the box, enter the following text:

    package org.acme.insurance.policyquote;

    rule "StartRuleflow"
    salience 100

    when
    then
        System.out.println("StartRuleflow - ON");
        kcontext.getKnowledgeRuntime().startProcess("policyquote.policyquotecalculationprocess");
    end

    Click Validate.

    Click Save.

7.2. Execute AccumulateTest Scenario

As the final step in this lab, ensure rule execution behavior remains correct now that the rules have been categorized into ruleflow groups.

This can be accomplished via the following:

    Execute AccumulateTest Scenario

    Recall that in the lab for 11_Advanced_Rules, the AccumulateTest Scenario was created.

    Re-execute this test

    Review BPM server log file

    This step is optional.

    As discussed in the first lab of this course, connect to your remote BPM Suite 6 server and view the log file.

    In particular, make note of the following log statement indicating that the new ruleflow was initiated:

    StartRuleflow - ON

Congratulations! You have created a BPMN2 process definition will orchestrate the firing of various ruleflow-groups.






Modeling Business Processes Lab
Focus of this lab is to create a new BPMN2 process definition called: policyquoteprocess .
Table of Contents

    1. Create the Policy Quote Process
    2. Add Process Nodes
        2.1. Start Event
        2.2. Script Task
        2.3. Reusable Subprocess
        2.4. Add BusinessRule Task to Retract Facts

In this lab, the following will be added to the policyquoteprocess :

    process variables (which encapsulate the state of a running BPMN2 process)

    ScriptTask node that ensures that data objects are initialized

    Reusable subprocess node that invokes the previously created ruleflow BPMN2: policyquote.policyquotecalculationprocess

    businessrule node responsible for retracting facts from the rules/bpm engine

Goal:

Understand script and subprocess tasks in a BPMN2 process definition.
1. Create the Policy Quote Process

The business process maintains the state of key data points that must be passed to different activities within the process. JBoss BPM Suite 6 uses variable declarations to hold this information.

For this lab, information from previous processes provides a number of data items. For other data items, including driver name, age, number of accidents, number of tickets, and vehicle year, the process captures this information from form input. The process uses these data items to populate the Policy and Driver facts that are inserted into the JBoss BPM Suite 6 working memory for the knowledge base that the rule engine uses.

The process requires variables to transfer information both to and from process activities. Follow this procedure to add the variable definitions required for this process.

    Add a new BPMN2 process to Guvnor:

        Click Authoring → Project Authoring in the BPM Console of BPM Suite 6.

        In Project Explorer, navigate to the org.acme.insurance.policyquote folder.

        Click New Item → Business Process.

        On the screen that appears, in the Name field, enter policyquoteprocess and click OK.

    Change the following in the Properties tab of the new process definition

        Change the Package property to org.acme.insurance.policyquote.

    Add imports:

        Click an empty area of the diagram (not on any element).

        Open the Properties panel to display the properties for the diagram.

        Expand the Core Properties section.

        Click Imports and enter the following:
        processImports14
        Figure 1. Process imports

    Add process variable declarations:

        Click the down arrow on the value for the Variable Definitions property.

        On the editor screen that appears, click Add Variable and enter the following:
        Table 1. Variable definitions

        Variable Name
            

        Type

        driver
            

        org.acme.insurance.Driver

        policy
            

        org.acme.insurance.Policy

        price
            

        Integer
        processVariables
        Figure 2. Process variables

2. Add Process Nodes
2.1. Start Event

    Add the start event node:

        Click the >> icon in the upper-left corner of the drawing palette to open the Object Library.

        Open the Start Events palette and drag a None icon onto the drawing palette.
            Skip this step if the palette already contains a start event.

        With the start event icon selected, some shortcut items appear next to the start node:
        shortcutPallet
        Figure 3. Shortcut palette

2.2. Script Task

    Add the Script task:

        Click the square icon with rounded corners, and drag it to the right of the start event.

        With the new task node selected, click the << icon in the upper-right corner of the drawing palette to open the Properties panel.

        For the task, in the Name field, enter Prepare Data.

        For the Task Type, select Script.

        Under the Task Type, click + to open Extra Properties.

        Under Script Language, set the value to Java.

        Under Script, click the Value box.

        Copy and paste the following script into the screen that appears, and then click Ok:

        // instantiate and pre-populate driver and policy domain classes
        // useful for lab 20 that currently invokes execution server without including policy and driver
        if(driver == null) {
          driver = new Driver();
          driver.setDriverName("Azra");
          driver.setAge(22);
          driver.setNumberOfAccidents(0);
          driver.setNumberOfTickets(1);
          kcontext.setVariable("driver", driver);
        }
        if(policy == null) {
          policy = new Policy();
          kcontext.setVariable("policy", policy);

        }

        if(policy.getPolicyType() == null)
          policy.setPolicyType( "AUTO" );

        policy.setDriver(driver);

        System.out.println("** prepareData:  will now add policy  & driver to kruntime : "+policy);
        /* insert objects into working memory */
        kcontext.getKnowledgeRuntime().insert( driver );
        kcontext.getKnowledgeRuntime().insert( policy );

    (Optional): On the top toolbar, click validateIcon14 and select Start validating.

    A "missing end event" message appears.

    Add an end event by dragging the thick-lined circle from the shortcut palette to the right.

    Your diagram should look like the following:
    processW2Elements
    Figure 4. Process with two elements

    To remove an unwanted item on the drawing palette, select it and click deleteIcon on the toolbar.
2.3. Reusable Subprocess

In BPMN2, a reusable subprocess is used to model a global pre-existing process.

The previously created org.acme.insurance.pricing.policyquotecalculationprocess BPMN2 will be modeled as a reusable subprocess in the policyquoteprocess BPMN2.

    On the Object Library screen, click the Subprocesses submenu to locate the Reuseable icon:
    reusableSubprocess
    Figure 5. Reusable subprocess

    Drag the icon to the right of the Prepare Data task.

    Change the name to Calculate Policy Quote.

    Select the Called Element property.

    On the screen that appears, select org.acme.insurance.pricing.policyquotecalculationprocess:
    calledElementSelection14
    Figure 6. Called element selection

    Click Save.

    Click the Prepare Data task.

    From the shortcut menu, drag a sequence flow arrow from the shortcut palette to the new subprocess.
        The red indicators change to green when you are at the proper place to release the arrow.

    Save the incomplete process to make sure your work is not lost.

    Your diagram should look like the following:
    processW3Elements
    Figure 7. Process with three elements

    Select the reusable subprocess node Calculate Policy Quote.

    Add the code snippet shown below as an Action into the On Exit Actions property on the Properties (Reusable) panel on the right.

    org.acme.insurance.Policy _policy = (org.acme.insurance.Policy)kcontext.getVariable("policy");
    kcontext.setVariable("price",_policy.getPrice());
    System.out.println("Price before review: " + policy.getPrice());

At this point, rules in the JBoss BPM Suite 6 engine solely determine the policy quotes that come out of the system. This is a great start, but sometimes you need to handle special cases a certain way to remain competitive. For example, Acme needs you to set up your system so that any policy with a price quote over $500 automatically triggers a manual review. You will do this in the next lab.
2.4. Add BusinessRule Task to Retract Facts

The default session strategy of the BPM process engine is: SINGLETON.

A singleton session strategy is one in which there will be only one process engine to handle all BPM related requests for a particular deployment. These process engine session strategy details will be explained later in the course.

With a SINGLETON session strategy, the session must be cleared of facts to avoid interfering with later rule executions. Follow these steps to remove the facts.
2.4.1. Create new retraction package

    Navigate in the BPM Console to: Authoring -> Project Authoring

    In the Project Explorer panel, click: org -> acme -> insurance

    Select: New Item -> Package and give it a name of retraction

2.4.2. Create three retraction rules:

    Create three new business rules using the DRL editor.

    For each rule, use org.acme.insurance.retraction for the package.

    Be sure to import used objects for each rule before building the rule.

    Use the rule names from the following table, and then click Ok.
    Table 2. Retraction rules

    Rule Name
        

    RuleFlow Group
        

    When
        

    Then

    RetractDriver
        

    retract
        

    driver: Driver()
        

    System.out.println("Retracting Driver " + driver.getDriverName() + " - " + driver.getAge()); retract(driver);

    RetractPolicy
        

    retract
        

    policy: Policy()
        

    System.out.println("Retracting policy: " + policy.getPrice()); retract(policy);

    RetractRejection
        

    retract
        

    rejection: Rejection()
        

    System.out.println("Retracting rejection: " + rejection); retract(rejection);

    Be sure to validate and save your progress after you create each rule.

    Your rules should be similar to the following:
    retractionrules

2.4.3. Add BusinessRule Task

    In the Process Designer of BPM Console, re-open the policyquoteprocess BPMN2.

    Click the End Event of the process and delete it. This should automatically remove the sequence flow leading to the end event as well.

    Add a task to execute the retraction rules:

        From the shortcut menu, drag a Task icon to the right of the Calculate Policy Quote node.

        With the new task icon selected, set the following:
        Table 3. Retract Facts task properties

        Property
            

        Value

        Name
            

        Retract Facts

        Task Type
            

        Business Rule

        Ruleflow Group
            

        retract

    Add a new End Event after this Retract Facts task.

    Click the Save icon and select the option to save to disk.

    Your diagram should resemble the following:
    start14
    Figure 8. Retract Facts task added

    If you do not add the retract ruleflow group attribute to RetractDriver, RetractPolicy, and RetractRejection, then these rules will fire before it is ideal for them to do so in the process flow.





User Task Lab
Table of Contents

    1. Create a User Task
        1.1. Exlusive Or Gateway and User Task
        1.2. Exclusive Or Logic
        1.3. On Exit Action
        1.4. Assign Human Task to Reviewer Group
    2. Task Node Data Mappings

Goals:

    Use the Process Designer (also called Web Designer) to create a Review Quote User Task after the Calculate Quote that is part of the reviewer group.

    Add an Exclusive Or gateway to route to the User Task if the policy price is greater than $500.

    Create a test scenario to test the process.

1. Create a User Task
1.1. Exlusive Or Gateway and User Task

    On the policyquoteprocess BPMN2, click the Calculate Policy Quote node on the canvas.
    start

    On the screen that appears, drag the Exclusive Or gateway from the palette to the right, and drop it on the canvas.

    With the first Exclusive Or gateway selected, drag a second Exclusive Or gateway to the right, and drop it on the canvas.

    Select the first Exclusive Or gateway again. Drag the Task icon from the shortcut palette and drop it on the canvas under the sequence line that connects the two gateways.

    With the new task node selected, go to the Properties (Task) panel on the right and enter the following:
    Table 1. Review Quote task properties

    Property
        

    Value

    Name
        

    Review Quote

    Task Type
        

    User

    Select the Review Quote node on the diagram again.

    Drag the sequence line from the shortcut palette to the second Exclusive Or gateway. When the red highlights turn green, drop the line:
    gatewaysAndHumanTask
    Figure 1. Gateways and human task

1.2. Exclusive Or Logic

    Select the sequence flow between the first Exclusive Or gateway and the Review Quote task.

    On the Properties (Sequence Flow) panel on the right, set the following:
    Table 2. Sequence flow between first gateway and Review Quote task

    Property
        

    Value

    Condition Expression Language
        

    Drools

    Condition Expression
        

    Policy(price > 500)

    Name
        

    Over 500

    Select the sequence flow between the two gateways and set the property values as follows:
    Table 3. Sequence flow between the two gateways

    Property
        

    Value

    Condition Expression Language
        

    Drools

    Condition Expression
        

    Policy(price <= 500)

    Name
        

    500 or less

1.3. On Exit Action

    Select the Review Quote User Task node and add the code snippet shown below as an Action into the On Exit Actions property in the Properties panel on the right.

    Integer p = (Integer)kcontext.getVariable("price");
    System.out.println("Price After review: " + p);

1.4. Assign Human Task to Reviewer Group

Later in this course, an instance of this policyquoteprocess process will be created. When the process token reaches this Human Task node, the process instance will be persisted to the jbpm database. The process instance is now in a wait-state awaiting the life-cycle of this human task (ie: claim, start, complete) to be completed. In this section of the lab, this human task will be assigned to a reviewer group. Subsequently, only users associated with the reviewer group (in particular,
the jboss user) will be able to claim, start and complete the human task at run-time.

For the purposes of this lab environment, the jboss user is already associated with the reviewer group as seen in your BPM Suite lab environment at: $JBOSS_HOME/standalone/configuration/application-roles.properties .

Execute the following in the BPM Designer to associate this Human Task with the reviewer group:

    Click the Review Quote node.

    Select the Groups property from the Properties palette.

    Enter the name reviewer.

    Set the value of the Task Name property to reviewQuote.
    group

    Save the process definition.

2. Task Node Data Mappings

Data input sets collect data for use by the task. Data output sets capture data coming out of the task.

In this section of the lab, set up the input and output data sets for the Review Quote task as follows:

    Click the Review Quote task.

    On the Properties (Task) panel, click the Assignments drop-down arrow.

    A pop-up entitled Review Quote Data I/O will appear. It consists of two sections

        Data Inputs and Assignments

        Used to define inbound human task variables. Also used to define mappings between process instance variables and those inbound human task variables.

        Data Outputs and Assignments

        Used to define outbound human task variables.

        Also used to define mappings between those outbound human task variables and process instance variables.

    In the Data Inputs and Assignments section, use the Add button to enter the following:
    Table 4. Data input set

    Name
        

    Data Type
        

    Source

    driverin
        

    org.acme.insurance.Driver
        

    driver

    policyin
        

    org.acme.insurance.Policy
        

    policy

    taskPriceIn
        

    Integer
        

    price

    On the Properties (Task) panel, click the DataOutputSet drop-down arrow.

    In the Data Outputs and Assignments section, use the Add button to enter the following:
    Table 5. Data output set

    Name
        

    Data Type
        

    Target

    policyOut
        

    org.acme.insurance.Policy
        

    policy

    taskPriceOut
        

    Integer
        

    price

    Your data input / output assignments should appear as follows:
    variableAssignmentDialog
    Figure 2. Data assignment editor

    Click Ok.

    Click the Save icon.

Congratulations! You’ve added a User Task node to your BPMN2 process.

The policyquoteprocess should now appear similar to the following in the BPM Designer:
processwithusertask

In a couple of later labs in this course, you’ll have an opportunity to initiate and test your process.



Form Modeler Lab
BPM Suite 6 include the web-based `Forms Modeler`
Table of Contents

    1. Review Process and Human Task Variables
    2. Generate Forms
    3. Modify the Process Start Form
    4. Modify the Task Form

The Forms Modeler allows for the creation of web forms to start a process and to complete human tasks. Once generated, these web forms can be further tweaked using the Forms Modeler.
Goal:

Add a process start form and review quote form using the Forms Modeler, and test the process using BPM Console.
1. Review Process and Human Task Variables

    Point your browser to the BPM Central web application of your online lab environment.

    Open the policyquoteprocess business process.

    Check your process instance and task variables. The process variable definitions should look like this:
    variable definitions good
    Figure 1. Variable definitions

    For the Review Quote human task node, the inbound and outbound task variables and assignments should look like this:
    data input good
    Figure 2. Task assignments

    These process and task variables will be used by the BPM Suite 6 Forms Modeler to auto-generate forms.

2. Generate Forms

Generate the Process and Task web forms as follows:

    Open the policyquoteprocess BPMN2 in the Process Designer

    Select the Generate all Forms menu option.
    lab bpms 16
    Figure 3. Generate all Forms option

    Selecting this option produces two forms in the FORM DEFINITIONS section of the policyquote project Project Explorer.

    In the Project Explorer, navigate to the: org.acme.insurance.policyquote project.

    Notice a new artifact type of: FORM Definitions
    lab bpms 17
    Figure 4. Form definitions

    Also notice an additional new artifact type of OTHERS

    The raw Freemodeler web forms are found here.

3. Modify the Process Start Form

    From Project Explorer, open the process start form: policyquote.policyquoteprocess-taskform.

    Notice that the fields of the Form Modeler panel consist of the Driver and Policy class variables.

    Recall that both Driver and Policy are defined as process instance variables in your policyquoteprocess.bpmn2.

    At the top toolbar of the Form Modeler, click the Form data origin tab.
    process form origin

    Notice that the BPMN2 process variables are used as data model object origins. Each process variable is assigned a Render color.

    At the top toolbar of the Form Modeler, click the Add fields by type tab.

    Tweak the form slightly to make it more usable:

        Hover over any of the fields in the Form Modeler and observe the small icons that appear:
        hover

        Remove the following fields not needed to start the process:

        Do so by hovering over the field and clicking the trash can icon.

            dlNumber

            ssn

            driver

            priceDiscount

            requestDate

            price

        Change the labels of each field such that they are a bit more user friendly.

        For example, change the label of the creditScore field to: Credit Score.

        To do so, hover over a field and click the pencil icon. Edit the value of the Label textbox
            Make sure you do not change the binding expressions, which link the field to a process variable.

    Your form should appear as the following in the Form Modeler:
    process form fields
    Figure 5. Start form (policyquote.policyquoteprocess-taskform)

    Save the form.

4. Modify the Task Form

    Follow the same steps of the Modify the Process Start Form section to modify the reviewQuote-taskform task form.

        The following are specifics regarding the two different price fields in this web form:

            Price

            This field is Read only and is bound to policyIn/price and policyOut/price, which is the price defined in the Policy object originating from the process variable policy

            New Price

            This field is bound to taskPriceIn task variable.

            This task field is used to override the calculated price.

    Once done, your form should look like this:
    reviewquote form fields
    Figure 6. reviewQuote form

    Mark fields as Read only

    With the exception of the New Price field, mark all the other fields on the human task web form as Read only.
    reviewquote form readonly
    Figure 7. reviewQuote form attribute read-only

    Doing so will prevent the owner of the human task from modifying any field on the task instance variables with the exception of the New Price (aka: taskPriceIn).

    Save the form.

Now that you have built your forms, you are nearly ready to execute and test your process. You will do this in the next lab exercise.




Task and Process Lab
Table of Contents

    1. Disable StartRuleFlow action
    2. Execute and Test the Process
        2.1. Build and Deploy the Project
        2.2. Start a New Instance of the Process
        2.3. Confirm that jboss user is a member of the reviewer group.
        2.4. Review and Complete the Task

Goal:

Start a process instance and interact with created forms, entered data, and completed tasks.
1. Disable StartRuleFlow action

In an earlier lab, you added a rule named StartRuleflow. This rule was used to start your policyquote.policyquotecalculationprocess process for testing purposes.

However, in the preceding lab, you created a new form that you used to initiate the process, which means you no longer need your StartRuleflow rule.

Because you might want to use this rule again for testing, you can simply change the then side of the rule.

    In the Project Explorer panel of the BPM Console, navigate to the DRL section of the org/acme/insurance/policyquote package.

    Change your StartRuleflow rule to the following:

    package org.acme.insurance.policyquote;

    rule "StartRuleflow"
        salience 100

        when
        then
            System.out.println("StartRuleflow - off");
            // kcontext.getKnowledgeRuntime().startProcess("policyquote.policyquotecalculationprocess");
    end

    Save the change

2. Execute and Test the Process

Now you can execute and test your process.
2.1. Build and Deploy the Project

First you need to build and deploy the project.

    Click Tools → Project Editor to open the Project screen.

    Click Build & Deploy.

    A green alert should appear indicating a successful build. If the build fails, this means there is something wrong with your process. Review the server.log to identify and fix the problem.

    If your project builds successfully, click Deploy → Process Deployments

    This screen provides management capabilites of the newly created _deployment unit.
    dunits

    Click Process Management → Process Definitions to open the Process Definitions screen.
    lab bpms 20
    Figure 1. Process Definitions screen

2.2. Start a New Instance of the Process

    While still on the Process Definitions panel, click the Start arrow on the policyquoteprocess.

    A screen appears showing the Start Process form that you designed earlier.

    To force the process execution to flow to the User Task, ensure that the calculated price is greater than 500. To do this, enter the following input data:
    Table 1. Form input values

    Field
        

    Value

    Age
        

    22

    Credit Score
        

    700

    Driver Name
        

    Samuel

    Number of Accidents
        

    0

    Number of Tickets
        

    1

    Policy Type
        

    AUTO

    Vehicle Year
        

    2009

    Click the Submit button.

    The Instance Details screen appears and provides information related to the newly executing process instance.

    Click the Process Variables tab

    The values of the process variables can be viewed and edited in this panel.

    In the Instance Details panel, is a drop down at the top called: Options.
    processmodel

    Click this drop down and select Process Model

    From the image, notice that the process is waiting in the Review Quote node.
    lab bpms 21
    Figure 2. Process waiting on Review Quote node

Congratulations! You now have a running BPMN2 process instance. The BPMN2 process instance is currently in a wait-state at its Human Task node. The process instance along with any state is safely persisted in the MySQL relational database.

This Human task could be acted upon at any time (ie: seconds -→ months).

While in this wait-state, the BPM server could be restarted and data regarding this process instance would not be lost.
2.3. Confirm that jboss user is a member of the reviewer group.

As configured in the Review Quote User Task, the process instance will remain in a wait state until a user with reviewer role claims the task to continue the process.

    In the BPMS Server, use a text editor like Pluma or Vi to validate and edit the file: ~/lab/bpms/standalone/configuration/application-roles.properties.

    Locate the line that belongs to the jboss user and add the reviewer group to the comma separated values like in this example:

    # The following illustrates how an admin user could be defined.
    #
    #admin=PowerUser,BillingAdmin,
    #guest=guest


    jboss=admin,analyst,user,kie-server,rest-all,agent,reviewer
    usadmin=Administrators,analyst,user,kie-server,rest-all

    Save the changes to the file.

    If you had to add the group to the application-roles.properties file, a Jboss Server restart is required for the changes to take effect in the running instance of BRM.

    Restart by stopping the running process for the server instance and start again by runnig the ~/lab/start-bpms.sh script.

2.4. Review and Complete the Task

The jboss user that you are using is a member of the reviewer group. Subsequently, a task should be waiting for this user.

    Click Task → Task Lists to open the Task List screen.

    A single task should appear with a name of: Review Quote

    The task is assigned to the group reviewer (which the user jboss is a member of), so any member of the reviewer group can claim the task to start working on it.
    lab bpms 22
    Figure 3. Task List screen

    Click on the Review Quote task in the task list. Doing so opens up the task details panel.

    At the bottom of the task details panel, click the blue Claim button.

    You are now the owner of the task. A form window appears with the task form you designed earlier:
    reviewquote form test
    Figure 4. Review Quote form

    Enter a value for the New Price, and then click Complete.
        Clicking the Save icon saves the state of the form, but it does not complete the task. Click Save if you want to come back to the task later.

    Observe that your task is completed and no longer appears in your task view. The process instance is also removed from the process instances view, because this process is finished.

    Check the server.log to confirm that the price was indeed overridden:
    lab bpms 24
    Figure 5. server.log after review price




Service Task Lab
Table of Contents

    1. Overview
    2. Service Task Mapping
    3. Build and Deploy Lab Assets
        3.1. integration tier Domain Model
        3.2. Deploy the SOAP Service
        3.3. Confirm SOAP Service Deployment
    4. Delete Lab Assets from JBDS
    5. New Process Imports and Variables
    6. Add a Script Task to policyquoteprocess BPMN2
    7. Add a BPMN2 Service Task to policyquoteprocess
    8. Rebuild and Deploy in Business Central
    9. Test

Goal:

Define and invoke a Business Process Model and Notation 2 (BPMN2) Service Task that invokes a remote simple object access protocol (SOAP) service.
Prerequisites:

    JBDS

    Internet access

1. Overview

Often times, a node in a business process needs to invoke a remote service. It is a best practice to encapsulate business logic in services (as per a SOA) and invoke those remote services from Service Tasks in a business process. Although technically possible, avoid coding business logic in custom nodes of a business process.

The focus of this lab is to invoke a SOAP service via a BPMN2 compliant Service Task node in a process definition.

To do this, the following is utilized in this lab:

    JAX-WS based SOAP service

    integrationTier domain model - The existing processTier domain model created via the Data Modeler tooling of the BPM Console is specific to a KIE project. To invoke remote services, it is a best practice to introduce an integrationTier domain model and then transform between the two models.

    Transformation node - This node is added to the policyquoteprocess BPMN2 to transform the existing processTier domain model to the new integrationTier domain model.

    BPMN2 compliant Service Task node - This node is added to the policyquoteprocess BPMN2 to invoke the JAX-WS based SOAP service.

2. Service Task Mapping

This lab will make use of the BPMN2 compliant Service Task.

The BPMN2 compliant Service Task is already mapped to its WorkItemHandler implementation in BPM Suite 6.1. No further action needed for this section.
3. Build and Deploy Lab Assets

In this next section of the lab, you build and deploy the lab assets for this module of the course hosted in github.

    Using the Git Repository Exploring perspective of JBDS, clone the BPMS Course Labs git repo for this course.
        The directory on your local filesystem created by cloning this project will be referred to as: $LAB_ASSETS_HOME.

    Import extras/18_Service_Tasks as a Maven project in JBDS

    The directory contains a pom.xml file as well as two project folders: domain and serviceTier.
    import lab assets

    In Project Explorer right-click on: parent → Run As → Maven Install

    Once the maven build is successful, it creates new target directories as follows: * 18_Service_Tasks/domain/target/domain-1.0.jar. * 18_Service_Tasks/bpm_servicetasks/serviceTier/target/bizservices.war.

3.1. integration tier Domain Model

Your BPM lab environment needs to include the integration-tier domain model.

The source code to this integration tier data model is included in the lab assets for this course at: extras/18_ServicesTasks/domain.

Make note of the JAXB annotations in those data classes. The JAXB annotations facilitate marshalling/unmarshalling of these integration tier domain model classes during SOAP invocations.

Also notice the inclusion of JPA annotations. The JPA annotations will be used later in this course (module: 22_BAM).

Add the integrationTier-domain-1.0.jar (which includes the new domain model classes) to the classpath of your JBoss EAP / BPPMS runtime as follows:
    This section can be skipped if using the remote BPM environment hosted in Openshift. That BPM environment already includes the domain model.

    Copy the integrationTier-domain-1.0.jar to business-central

    cp bpms-labs/extras/18_Service_Tasks/domain/target/integrationTier-domain-1.0.jar \
         $JBOSS_HOME/standalone/deployments/business-central.war/WEB-INF/lib/integrationTier-domain-1.0.jar

    Bounce your BPMS server.

3.2. Deploy the SOAP Service

Deployment of the SOAP service will occur via the JBoss EAP Management Console.

    In your browser, navigate to JBoss EAP Management Console as discussed in the lab of the first module of this course.
        If using the BPM server included in the course virtual machine, recall that the EAP management console is accessible by navigating to: http://<vm_ip_address>:9990 and then authenticating using: admin / admin

    Once authenticated in, click the Deployments tab at the top tool-bar.

    In the Deployments panel, click Add and navigate to the location on disk where you cloned the bpms-labs.git repository.

        Select: extras/18_Service_Tasks/serviceTier/target/bizservices.war
        deployment

        Click Next and then in the subsequent pop-up window click: Save
        needsenabling

    In the Deployments panel, notice that the bizservices.war needs to be enabled.

        Click on bizservices.war and then click the En/Disable button.

        You will be prompted to: Enable bizservices.war. Click Confirm.
        warisenabled

3.3. Confirm SOAP Service Deployment

    Tail the server.log of your remote BPM Suite 6 lab environment

    Notice that JBoss EAP6 detected the @Webservice annotation and deployed the SOAP service:

    JBWS024061: Adding service endpoint metadata: id=com.redhat.gpe.auditReview.AuditReview
     address=http://bpmjb-bpmstraining.apps.lab2.opentlc.com:80/bizservices/AuditReview
     implementor=com.redhat.gpe.auditReview.AuditReview
     serviceName={urn:com.redhat.gpe.auditReview:1.0}AuditReview
     portName={urn:com.redhat.gpe.auditReview:1.0}AuditReviewPort
     annotationWsdlLocation=null
     wsdlLocationOverride=null
     mtomEnabled=false

    Also note the address URL to the newly deployed SOAP service. This will be needed in the next step.

    Verify accessibility to the web service definition language (WSDL) of this SOAP service:

        Open a tab in a browser (preferably Firefox or Google Chrome).

        Enter the URL for the auditReview SOAP service and add the suffix ?wsdl.

        You should see a WSDL output that resembles the following:
        wsdl18
        Figure 1. WSDL output

4. Delete Lab Assets from JBDS

The lab assets for this module are no longer needed and can be deleted from JBDS.

    In Project Explorer of JBDS, navigate to the parent project

    Right-click the parent project and select Delete

5. New Process Imports and Variables

    Log in to BPM Central.

    In the Process Designer, open the policyquoteprocess process.

    Open the Properties palette and click anywhere in the white space of the diagram to access the Process properties.

    Click Imports and add imports as follows:

        The end state of having added imports to your process is as follows:
        lab imports
        Figure 2. Add imports

        As depicted in the figure above, define additional import statements for the following two integrationTier domain model classes and the AuditReview SOAP service WSDL:

        Import Type
            

        Custom Class Name
            

        WSDL Location
            

        WSDL Namespace

        default
            

        com.redhat.gpe.refarch.bpm_servicetasks.domain.DriverService
                

        default
            

        com.redhat.gpe.refarch.bpm_servicetasks.domain.PolicyService
                

        wsdl
                

        http://<bpm_server_ipaddress>/bizservices/AuditReview?wsdl
            

        urn:com.redhat.gpe.auditReview:1.0
            The value of the IP address to your AuditReview SOAP service WSDL is the same that you previously used when viewing the WSDL in your browser.

        click OK to save the newly entered process definition imports.

    Once again back in the Properties tab for the business process, click Variable Definitions to add the following process variables:

        The end state of having defined new process variables is as follows:
        variable definitions
        Figure 3. Add Variables

        Specifically, add the following new process variables:

        Name
            

        Custom Type

        policyService
            

        com.redhat.gpe.refarch.bpm_servicetasks.domain.PolicyService

        driverService
            

        com.redhat.gpe.refarch.bpm_servicetasks.domain.DriverService

        Click OK.

    Validate the process definition in the Process Designer, and save the process definition.

6. Add a Script Task to policyquoteprocess BPMN2

This section of the lab involves adding a script task to the process definition. The purpose of this script task is to execute a simple transformation from your processTier domain model to your serviceTier domain model.

    From the policyquoteprocess, open the Object Library → Tasks palette.

    Drag the Script from the palette to the diagram, and connect it to match the following:
    policyquote new script task
    Figure 4. Script Task addition
        The diagram above includes a script task after the CalculatePolicyQuote and is called: post calc. This script task is not required but you may find that adding it helps in troubleshooting at runtime. Its function is to simply log the policy instance variable after calculations have been made by the Business Rule node. The script of the post calc node is as follows: System.out.println("postCalc() policy ="+policy);`

    Click the new Script task and expand the Properties (Script) palette.

    Name the task Prepare Data Service Task.

    Modify the script property as follows:

    driverService = new com.redhat.gpe.refarch.bpm_servicetasks.domain.DriverService();

    // Java transform: Driver --> DriverService
    driverService.setDriverName(driver.getDriverName());
    driverService.setAge(driver.getAge());
    driverService.setDlNumber(driver.getDlNumber());
    driverService.setNumberOfAccidents(driver.getNumberOfAccidents());
    driverService.setNumberOfTickets(driver.getNumberOfTickets());
    driverService.setCreditScore(driver.getCreditScore());

    // Java transform: Policy --> PolicyService
    policyService = new com.redhat.gpe.refarch.bpm_servicetasks.domain.PolicyService();
    policyService.setDriver(driverService);
    policyService.setPolicyType(policy.getPolicyType());
    policyService.setPrice(policy.getPrice());
    policyService.setPriceDiscount(policy.getPriceDiscount());
    policyService.setVehicleYear(policy.getVehicleYear());

    kcontext.setVariable("driverService", driverService);
    kcontext.setVariable("policyService", policyService);

    Save your modified diagram

7. Add a BPMN2 Service Task to policyquoteprocess

This section of the lab involves adding a BPMN2 compliant Service Task to the process definition. You configure this Service Task to invoke a remote SOAP service.

    From the policyquoteprocess, add an additional node to the right of the Prepare Data Service Task node.
    policyquote new service task
    Figure 5. Service Task addition

    Click this new node and assign it a type of: Service Task.

    With the new node still selected, expand the Properties (Service) palette.

    Modify the Service Task properties as follows:
    Table 1. Service Task properties

    Property Name
        

    Value

    Name
        

    Audit Review Task

    Service Implementation
        

    Webservice

    Service Interface
        

    AuditReview

    Service Operation
        

    addPolicy

    TaskType
        

    Service

    Define Assignments

        While still in the Properties panel of the new service task, click the Assignments field.

        Click the Add button in the Data Inputs and Assignments section.

        Populate as follows:

        Name
            

        Data Type
            

        Source

        Parameter
            

        (click custom) com.redhat.gpe.refarch.bpm_servicetasks.domain.PolicyService
            

        policyService

        Click the Add button in the Data Outputs and Assignments section.

        Populate as follows:

        Name
            

        Data Type
            

        Target

        Result
            

        Object
            

        Click the Save button at the bottom of the Audit Review Task Data I/O pop-up.

    Save the updated policyquoteprocess BPMN2.

8. Rebuild and Deploy in Business Central

Now that the policyquoteprocess has been modified, the next step is to rebuild and redeploy the project in Business Central.

    If you previously deployed the policyquote project, delete the previous deployment:

        Navigate to Deploy → Process Deployments.

        Click the Undeploy Action icon corresponding to the org.acme.insurance:policyquote:1.0 deployment.

    Navigate to *Authoring → Project Authoring

    Ensure you are still on the policyquote project.

    Click: Open Project Editor in the left side panel.

    Click Save, and then click Build & Deploy.
        You may come across an exception similar to the following:

    Only a type can be imported. com.redhat.gpe.refarch.bpm_servicetasks.domain.PolicyService resolves to a package
    Only a type can be imported. com.redhat.gpe.refarch.bpm_servicetasks.domain.DriverService resolves to a package

    If so, ensure that integrationTier-domain-1.0.jar is in fact copied to the classpath of your BPM server and that the BPM server has been bounced (discussed earlier in this lab).

    To verify the redeployment, navigate to Deploy → Deployments and notice a fresh deployment unit of org.acme.insurance:policyquote:1.0.

9. Test

    Navigate to Process Management → Process Definition.

    Click policyquoteprocess.

    Click the Start icon on the far right of the policyquoteprocess line.
    start policy quote18
    Figure 6. Start process

    Test whether the Service Task invokes properly by starting a new process instance and filling the form with the following values:
    Table 2. Form input values

    Field
        

    Value

    Age
        

    22

    Credit Score
        

    700

    Driver Name
        

    Samuel

    Number Of Accidents
        

    0

    Number Of Tickets
        

    1

    Policy Type
        

    AUTO

    Vehicle Year
        

    2009

    Claim the task and complete.

    To verify the test results, check the server.log of your remote BPM Suite 6 JVM for the following message:

    INFO  [AuditReview] (http-localhost/127.0.0.1:8080-2) addPolicy() policy =
      policyType : AUTO
      price : 550
      priceDiscount : 0
      vehicle year : 2009
      driver :
        driverName : Samuel
        dlNumber : null
        age : 22
        accidents : 0
        tickets : 1
        SSN : null
        creditScore : null

Congratulations! You have defined and invoked a BPMN2 Service Task that invokes a remote SOAP service.


Event Processing Lab
Table of Contents

    1. Add Throwing Signal Event to Audit Review branch
    2. Create Data Warehousing branch
    3. Test the Process Instance

Goal:

Use Intermediate events to trigger activity between different branches in a BPMN2 process.
Scenario:

The director has decided that data needed to create reports of audit policies should be made available for reporting purposes in the following set of circumstances:

    if the policy quote price is > 500

    prior to an audit review occurs

To provide the data prior to performing the audit, this lab uses BPMN2 Intermediate events.
1. Add Throwing Signal Event to Audit Review branch

    Log in to JBoss BPM Suite 6.

    Select the org.acme.insurance.policyquote package.

    Open the policyquoteprocess business process.

    From the Object Library, select Throwing Intermediate Events → Signal.
    throwingIntermediateEvents282
    Figure 1. Throwing Intermediate Events

    Drag the Signal onto the palette and drop it below the first exclusive gateway node.
    signal

    Name the event Throw Audit Request.

    Select the Over 500 sequence line, and then drag the tip of the arrow to the Throw Audit Request event node.

    From the shortcut menu of the Throw Audit Request event, drag a sequence line to the Review Quote task.

    Select the Throw Audit Request signal node.

    On the Properties panel on the right, enter AuditRequest for the SignalRef property.

2. Create Data Warehousing branch

    Add Parrellel gateway

        Just after the Calculate Policy Quote subprocess node, add a Parrallel gateway.

        Name the Parallel gateway: split and connect one branch of the gateway to the existing Exclusive gateway. (See Figure 3)

    Add Catching Intermediate Event

        From the Object Library, select Catching Intermediate Events → Signal.

        Drag the Signal onto the palette above the primary branch of the process (ie: above the Exclusive gateway. (See Figure 3.)

        Select the new signal node and in the Properties panel enter the following:

            Name: Catch Audit Request

            SignalRef : AuditRequest

            It is critical that the value is exactly the same as the SignalRef property assigned to the Throwing Intermediate Event

        Connect the Split gateway to the Catch Audit Request catching event

            Connect the Sequence Flow that connects the two and open the Properties panel

            For the IsImmediate property, change the value to true
            isimmediate

            This property ensures that this branch executes prior to the Audit Review branch. The Catch Audit Request event node will be ready if an AuditRequest event is thrown.

    Add Script node:

        Select the Catch Audit Request signal node.

        From the shortcut menu, select a task node.

        Enter or select the following:
        Table 1. Script node properties

        Property
            

        Value

        Name
            

        Data Warehouse

        Task Type
            

        Script

        Script property
            

        System.out.println("Perform Data Warehouse activity here. pInstanceId = " + kcontext.getProcessInstance().getId() + " policy = "+policy);

    Add an End event after the Data Warehouse script node.

    Save your progress.

Your diagram should look similar to the following:
processEventsAdded1012
Figure 2. Process events added
3. Test the Process Instance

    Build and deploy the modified KIE project in Project Editor.

    Navigate to: Process Management → Process Definitions

    Execute an instance of policyquoteprocess with policyquote values that ensure the price > 500

    In the Instance Details panel, notice that the only remaining entry in the Current Activities secion is the Review Quote HumanTaskNode.
    instance details

    Switch to the Logs tab

        Click Technical

        Notice that the Catch Audit Request EventNode was initially reached. Afterwards, the Throw Audit Request ActionNode was invoked which then triggered the catching event.
        log

    Optional: review the log messages in the BPM server.log.

Congratulations! You have used Intermediate events to trigger activity between different branches in a BPMN2 process.



JBoss BPM Suite 6 Execution Server Lab
Table of Contents

    1. Overview
        1.1. Process Tier domain model
        1.2. Execution Server client
    2. Verify Client System Properties
    3. Execute Client

Goal:

Using the JBoss BPM Suite 6 Java remoting clients, programmatically start a policyquote process instance in the remote BPM Suite 6 server.
1. Overview

This lab consists of a single JUnit-based test class that uses java client libraries to invoke the Execution Server bundled in the remote BPM Suite 6 standalone business-central.war web archive.
client invocation
Figure 1. Execution Server in JBoss BPM Suite 6
1.1. Process Tier domain model

The RESTful client utilized in this lab invokes the remote BPM Suite 6 engine using the following two data objects used throughout the course:

    org.acme.insurance.Policy

    org.acme.insurance.Driver

Recall that these classes are included in the policyquote project which was cloned to your local workstation in the lab for module: 5_DRL. policyquote project was also locally built. Subsequently, these two data objects should already be in your local maven repository (ie: ~/.m2/repository). If not, return to the lab for module 05_DRL for instructions on how to rebuild the policyquote project in your local workstation.

The Policy and Driver data objects will be marshalled into their XML representations using JAXB. Often times to marshall to XML, JAXB annotations are needed in your data classes. Because Policy and Driver are simple, JAXB is able to marshall instances of these classes without JAXB annotations.
1.2. Execution Server client

The lab assets linked above in this page provides a java client (KieClientInvoker.java) that uses KIE libraries to invoke the remote Execution Server. KieClientInvoker has dependencies on the integration tier domain model classes from lab 18. Since these integration tier classes were previously built and installed in your local maven environment, building LiverServerTest from this lab should resolve the integration tier domain model dependencies without
issue.

    In previous labs, you’ve already cloned the lab assets for this course.

    In JBDS, import bpms-labs/extras/20_Process_Engine a maven project.

    In the Project Explorer of JBDS, open the test class: com/redhat/gpe/kie/services/client/api/KieClientInvoker.java

        Notice that the client instantiates and populates the fields of the PolicyService and DriverService objects.

        Also notice that the client then uses these objects as the payload when starting an instance of the policyquoteprocess process.

2. Verify Client System Properties

    In Project Explorer of JBDS, open the pom.xml of the imported lab assets for this module.

    Notice the following system properties:

         <!-- *** CHANGE THESE PROPERTIES AS APPROPRIATE  *** -->

         <!-- deployment and connectivity settings to remote Execution Server -->
         <deploymentId>org.acme.insurance:policyquote:1.0</deploymentId>
         <deployment.url>http://bpmstest-ose3.opentlc.com:8080/business-central</deployment.url>
         <userId>jboss</userId>
         <password>brms</password>
         <processId>policyquote.policyquoteprocess</processId>

         <!-- process variables past to policyquote process at start-up -->
         <driverName>azra</driverName>
         <age>23</age>
         <numberOfAccidents>2</numberOfAccidents>
         <numberOfTickets>2</numberOfTickets>
         <vehicleYear>2010</vehicleYear>
         <includePolicyPayload>TRUE</includePolicyPayload>
         <!-- *********************************************** -->

    Change the value of the deployment.url property to that of your remote BPM Suite 6 server.

    Adjust any additional values as needed and save the file.

3. Execute Client

    At the command line, return to $LAB_ASSETS_HOME/extras/20_Process_Engine

    Execute:

    mvn clean test -s ~/.m2/settings.xml -Dtest=com.redhat.gpe.kie.services.client.api.KieClientInvoker

    In your remote BPM Suite 6 server, review the server.log

    Notice how an instance of the policyquote process has been instantiated.


Process Simulation Lab
Table of Contents

    1. Import PolicyQuoteProcessSimulated BPMN2
    2. View Simulation Paths
    3. Define Simulation Properties
    4. Perform Process Simulation
    5. Adjust Simulation Properties

Goal:

To use the process simulation feature in JBoss BPM Suite 6 to perform some simulation and analysis.
1. Import PolicyQuoteProcessSimulated BPMN2

    Your local workstation should already have the following file from the lab assets for this course: extras/21_Simulation/PolicyQuoteProcessSimulated.bpmn2

    If not, download the PolicyQuoteProcessSimulated.bpmn2 fiile.

    Open a browser and navigate to the BPM Console of your remote BPM Suite 6 environment.

    Create a new business process by navigating to New Item → Business Process.

    Name the process PolicyQuoteProcessSimulated.

    On the Process Designer toolbar, click import_icon and select Import from BPMN2.
    import from bpmn2
    Figure 1. Import from BPMN2

    Click Choose File, select the PolicyQuoteProcessSimulated.bpmn2 from your local filesystem and then click Import:

    You should see the following new process.
    PolicyQuoteProcessSimulated
    Figure 2. Business process (PolicyQuoteProcessSimulated.bpmn2)

    Save the BPMN2.

This is the process that will be used for simulation.
2. View Simulation Paths

For this process, there are two possible execution paths. Let’s view each one of them.

    On the Process Designer toolbar, click simulation_icon and select Process Paths.

    In the Process Paths pop-up, select one of the colors and click Show Path
    show process path
    Figure 3. Execution paths

    View the other path by repeating the previous steps using the other color.

3. Define Simulation Properties

In this section of the lab, lets define specific properties on various nodes in our BPMN2 that will be utilized when executing a simulation.

    500 or less Simulation

        Select the 500 or less branch.

        Open the Properties panel and take note of the Simulation section at the bottom

        Assume that 20% of the policy quotes will have a price of 500 or less.

        Subsequently, these policies do not require any review.

        Enter the value of the Probability field is: 20
        simulation probability 1
        Figure 4. Properties: Probability = 20

    Over 500 Simulation

        Select the Over 500 branch.

        In the Properties panel, set the value of the Probability field to: 80.
            The total probability for all possible branches must equal 100%.

    Review Quote Simulation

        Select the Review Quote user task.

        For this lab scenario, assume that there are two officers available to review the policy quotes, the minimum time required to review one policy quote is 30 minutes, and the maximum time is 2 hours.

        Define the following simulation properties for this user task node.
        Table 1. Simulation properties

        Property
            

        Value

        Cost per time unit
            

        1

        Distribution type
            

        uniform

        Processing time (max)
            

        120

        Processing time (min)
            

        30

        Staff availability
            

        2

        Working hours
            

        8.0

4. Perform Process Simulation

With the simulation properties defined, you can now perform process simulation.

    On the Process Designer toolbar, click simulation_icon and select Run Simulation.

    On the Run Process Simulation pop-up, enter or select the following values.
    Table 2. Run Process Simulation values

    Property
        

    Value

    Number of instances
        

    50

    Interval
        

    480

    Interval units
        

    minutes

    These values are simulating a test that runs for 8 hours (480 minutes) with 50 policy quote processes being executed.

    Click Run Process Simulation

    The process simulates 50 process instances in the background.

    After a few seconds, the Simulation Results tab should appear.
    simulation result 1
    Figure 5. Simulation Results

    Click Review Quote and look at the Resource Utilization report.
    resource utilization 1
    Figure 6. Simulation Results: Review Quote

    The graph above is indicating that with only two reviewers, the staff will be closed to maxed out if they are asked to handle 50 policy quotes per day.

5. Adjust Simulation Properties

Next, you increase the number of reviewers and simulate the process again.

    Click the Process Modeling tab and click Review Quote.

    Increase the Staff availability from 2 to 10.

    Run the process simulation again with the same parameters:
    Table 3. Run Process Simulation values

    Property
        

    Value

    Number of instances
        

    50

    Interval
        

    480

    Interval units
        

    minutes

    After the simulation execution completes, go to the Resource Utilization report again for Review Quote activity.
    resource utilization 2
    Figure 7. Simulation Results: Review Quote (adjusted properties)

    Notice how resource utilization has been reduced to a healthy level.


