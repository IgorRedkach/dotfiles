System Logging and NTP

    System Log Architecture

    Reviewing syslog Files

    Reviewing systemd Journal Entries

    Preserving the systemd Journal

    Maintaining Accurate Time



System Log Architecture
System Logging

    Processes and operating system kernel record event logs

        Use for system auditing and troubleshooting

    Logs are persistently stored in /var/log

    Red Hat Enterprise Linux 7 includes logging system based on syslog protocol

    Syslog messages are handled by two services:

        systemd-journald

        rsyslog

systemd-journald Daemon

    Collects messages from:

        Kernel

        Boot process

        Daemon output and errors

        Syslog

    Writes messages to event journal

        By default, journal does not persist between reboots

        Journal allows missed syslog messages and events to be collected in database

    Also forwards syslog messages to rsyslog for further processing




rsyslog Service

    Sorts syslog messages by facility (type) and priority

    Writes messages to persistent files in /var/log

    /var/log holds system- and service-specific log files maintained by rsyslog

/var/log/messages

syslog messages except those related to authentication and email processing (which periodically run jobs), and messages related to debugging

/var/log/secure

Security and authentication messages and errors

/var/log/maillog

Mail server messages

/var/log/cron

Messages of periodically executed tasks

/var/log/boot.log

Messages related to system startup

For more info, see:

    systemd-journald.service(8), rsyslogd(8), and rsyslog.conf(5) man pages

    Red Hat Enterprise Linux System Administrator’s Guide at http://docs.redhat.com/



syslog Files

    Each syslog message is categorized by:

        Facility: Type of message

        Priority: Severity of message

    Eight priorities are standardized and ranked as follows:

Eight priorities are standardized and ranked as follows:

0 emerg

System is unusable

1 alert
Action must be taken immediately

2 crit
Critical condition

3 err
Non-critical error condition

4 warning
Warning condition

5 notice
Normal but significant event

6 info
Informational event

7 debug
Debugging-level message

rsyslog Files

    rsyslogd uses facility and priority to determine how to handle message

    Message handling is configured by:

        /etc/rsyslog.conf

        *.conf

    Configuration files stored in /etc/rsyslog.d

    To change rsyslogd so it is not overwritten by updates to rsyslog, use customized *.conf files in /etc/rsyslog.d


/etc/rsyslog.conf File

    Directives in #### RULES #### section define where to save log messages

    Left side of each line indicates facility and severity of log message that directive matches

    Can use * wild card in facility and severity fields

    Right side of each line indicates what file to save log message in

    Log messages normally saved in /var/log

    Message handled by rsyslog can appear in multiple log files

        To prevent that, set severity to none

        Does not add any messages directed to this facility to specified log file

    Can print syslog messages to terminals of all logged-in users.

        Default rsyslog.conf does this for all messages with emerg priority



#### RULES ####

# Log all kernel messages to the console.
# Logging much else clutters up the screen.
#kern.*                                                 /dev/console

# Log anything (except mail) of level info or higher.
# Don't log private authentication messages!
*.info;mail.none;authpriv.none;cron.none                /var/log/messages

# The authpriv file has restricted access.
authpriv.*                                              /var/log/secure

# Log all the mail messages in one place.
mail.*                                                  -/var/log/maillog

# Log cron stuff
cron.*                                                  /var/log/cron

# Everybody gets emergency messages
*.emerg                                                 :musrmsg:*

# Save news errors of level crit and higher in a special file.
uucp,news.crit                                          /var/log/spooler

# Save boot messages also to boot.log
local7.*                                                /var/log/boot.log

For more info, see:

    rsyslog.conf(5) man page

    /usr/share/doc/rsyslog-*/manual.html in rsyslog-doc, available from Red Hat Enterprise Linux 7 software channel


Log File Rotation

    To prevent filling up file system, logs are rotated by logrotate

    Rotated log files are renamed with date extension

        Example: /var/log/messages, rotated October 30, 2014, became /var/log/messages-20141030

    When log file is rotated:

        New log file is created

        Service that writes to it is notified

    After defined number of rotations, old log file is discarded to free disk space

    A cron job runs logrotate daily to see if logs need rotation

    Most log files rotate weekly

        Some rotate faster or slower

        Some rotate based on size


Analyzing a syslog Entry

    rsyslog logs put oldest message on top and newest message at end

    Entries are recorded in standard format

        Example: Anatomy of /var/log/secure


Monitoring Log Files With tail

    Monitoring log files can help reproduce problems and issues

    To output last 10 lines of specified file, use tail -f /path/to/file

        Command continues to output new lines when written

    To monitor for failed login attempts on one terminal, use ssh as root while user logs in

        Example using server1.example.com:

        [root@server1~]$ tail -f /var/log/secure


Sending a syslog Message With logger

    To send messages to rsyslog service, use logger

    By default, logger sends message to facility user with user.notice severity

        To specify otherwise, use -p

    logger useful for testing rsyslog configuration changes

    To send message to rsyslogd that is recorded in /var/log/boot.log:

    [root;@server1 ~]$ logger -p local7.notice "Log entry created on server1.example.com.

For more info, see:

    logger(1), tail(1), rsyslog.conf(5), and logrotate(8) man pages

    /usr/share/doc/rsyslog-*/manual.html provided by rsyslog-doc package

    Red Hat Enterprise Linux System Administrator’s Guide at http://docs.redhat.com/

Finding Events With journalctl

    systemd journal stores logging data in structured, indexed binary file

        Includes extra information about log event

        Example: For syslog events, can include facility and priority of original message

    systemd journal stored in /run/log

        Contents are cleared after reboot

        Can change setting

To see complete system journal, starting with oldest log entry, use journalctl as root

[root@server1~]# journalctl

Messages with priority notice or warning appear in bold
Messages with priority error and higher appear in red

Using journalctl to Filter Log Entries

    Limit journal searches to show only relevant output

    By default, journalctl -n shows last 10 log entries

        Can specify number of entries to display

        Example: Display last 5 log entries

        [root@server1~]# journalctl -n 5

    When troubleshooting, filter journal output by priority

    journalctl -p takes either name or number of priority level

        Shows entries for that level and higher

    Priority levels: debug, info, notice, warning, err, crit, alert, and emerg

    To filter journalctl output to messages with priority err and above:

    [root@server1~]# journalctl -p err

    To output last 10 journal entries, use journalctl -f

        Continues to output new entries when written

        [root@server1~]# journalctl -f


Searching by Time Range

    To limit output to specific time range, use journalctl with --since and --until

        Both options take YYYY-MM-DD hh:m:ss data format

        If date is omitted, defaults to today

        If time is omitted, defaults to whole day starting at 00:0:00

        Can use yesterday, today, and tomorrow with both options

    To output all journal entries recorded today:

    [root@server1~]# journalctl --since today

    To output journal entries from 10th February, 2014, 20:0:00 to 13th February, 2014, 12:0:00:

    [root@server1~]# journalctl --since "2014-02-10 20:0:00" --until "2014-02-13 12:00:00"

sing Verbose Output

    Turn on verbose output to view extra fields for log entries

    To reduce output of complex searches, use extra fields to filter query output

    [root@server1~]# journalctl -o verbose

Query Options

    Useful when searching for lines relevant to particular process or event

_COMM
    

Name of the command

_EXE
    

Path to executable for process

_PID
    

Process PID

_UID
    

UID of user running process

_SYSTEMD_UNIT
    

systemd unit that started process

    Can combine options

        Example: Show all journal entries related to processes started by systemd unit file sshd.service that also have PID 1182:

        [root@server1~]# journalctl _SYSTEMD_UNIT=sshd.service _PID=1182
For more information on journalctl and commonly used journal fields, see:

    journalctl(1) and systemd.journal-fields(7) man pages

    Red Hat Enterprise Linux System Administrator’s Guide at http://docs.redhat.com/

Default systemd Journal

    By default, systemd journal is kept in /run/log/journal

        Cleared when system reboots

        For most installations, journal that starts with last boot is sufficient

    If /var/log/journal exists, systemd logs to that directory instead

        Advantage: Historic data is available immediately at boot

    Even for persistent journal, not all data is kept forever

        Built-in log rotation mechanism triggers monthly

        Journal cannot exceed 10% of file system

        File system must have 15% or more free

Changing systemd Journal Limits

    Tune systemd size limits in /etc/systemd/journald.conf

        Current journal limits are logged when systemd-journald starts

        To see top two lines of journalctl output:

        [root@server1~]# journalctl | head -2
        -- Logs begin at Wed 2014-03-05 15:3:37 CST, end at Thu 2014-03-06 21:57:54 CST. --
        Mar 05 15:3:37 server1.example.com systemd-journal[94]: Runtime journal is using 8.0M (max 277.8M, leaving 416.7M of free 2.7G, current limit 277.8M).

    To make systemd journal persistent, create /var/log/journal as root

    [root@server1~]# mkdir /var/log/journal

    Set /var/log/journal to be:

        Owned by root and group systemd-journal

        Have permissions 2755

        [root@server1~]# chown root:ystemd-journal /var/log/journal
        [root@server1~]# chmod 2755 /var/log/journal

    Reboot system or send special signal USR1 as root to systemd-journald

    [root@server1~]# killall -USR1 systemd-journald

        systemd journal now persistent across reboots

        journalctl -b can reduce output by showing only log messages since last boot

        [root@server1~]# journalctl -b

Debugging a System Crash

    When debugging with persistent journal, usually limit query to reboot before crash

    To indicate number of prior system boots to output, use -b with negative number

        Example: journalctl -b -1 limits output to previous boot

    

For more info, see:

    mkdir(1), systemd-journald(1), and killall(1) man pages

    Red Hat Enterprise Linux System Administrator’s Guide at http://docs.redhat.com/

Setting Local Clocks and Time Zone

    Synchronized system time is crucial for log file analysis across multiple systems

    NTP: Standard way to provide and obtain correct time on Internet

        Can get accurate time information from public NTP services such as NTP Pool Project

    Can use high-quality hardware clock to serve accurate time to local clients

Maintaining Accurate Time
timedatectl Command

    To view time information, including current time, time zone, and NTP synchronization settings, use timedatectl

    [student@server1 ~]$ timedatectl

Time Zone Database

    To list database with known time zones, use timedatectl list-timezones

    [student@server1 ~]$ timedatectl list-timezones

    Time zone names are based on public database maintained by IANA

    Time zones are named by continent or ocean, then largest city

        Example: Most of US Mountain time zone is "America/Denver"

Selecting Time Zone

    Selecting correct time zone may not be intuitive

        Localities within time zone may have different rules for daylight saving time

        Example: Much of Arizona (US Mountain time) does not use daylight saving time and is in time zone "America/Phoenix"

    To identify correct time zone, use tzselect

        Interactively prompts with questions about system location and outputs name of correct time zone

        Does not make any changes to system time zone setting

Maintaining Accurate Time
Changing System Time and Date

    To change current time and date, use timedatectl set-time

        Format YYYY-MM-DD hh:m:ss

        Can omit either date or time

    Example: Change time to 09:0:00

    [root@server1~]$ timedatectl set-time 9:0:00

Enabling NTP Synchronization

    Use set-ntp to enable or disable automatic NTP synchronization

        Requires true or false argument

    To turn on NTP synchronization:

    [student@desktop1 ~]$ timedatectl set-ntp true

Configuring and Monitoring chronyd

    chronyd synchronizes local hardware clock (RTC) to NTP servers

    If no network connectivity, syncs to calculated RTC clock drift in driftfile in /etc/chrony.conf

    By default, chronyd uses NTP Pool Project servers

        Does not need additional configuration

        Can change NTP servers for machines on isolated network

    Quality of NTP time source determined by stratum value

        Indicates number of hops machine is away from reference clock

            stratum 0: Reference clock

            stratum 1: Directly attached to NTP server

            stratum 2: Machine synchronizing from NTP server

server and peer Time Sources

    Two categories of time sources configured in /etc/chrony.conf:

        server: one stratum above local NTP server

        peer: same stratum as NTP server

    Can specify more than one server and peer

        Specify one per line

        First argument of server line is IP address or DNS name of NTP server

        Next is series of server options

            Recommended: Use iburst option

            After service starts, quickly takes four measurements for accurate initial synchronization

Reconfiguring chronyd

    Can configure chronyd server to synchronize with server other than default servers

    Example: Reconfigure to use instructor.example.com

        In /etc/chrony.conf, replace current server entries with the following:

        # Use public servers from the pool.ntp.org project.
        server instructor.example.com iburst

        Restart chronyd:

        [root@server1~]# systemctl restart chronyd

chronyc Command

    chronyc command acts as client to chronyd service

    After setting up NTP, verify that NTP server was used to synchronize system clock

    To verify clock synchronization, use chronyc sources

        To view verbose output, use chronyc sources -v

        [root@server1~]$ chronyc sources -v
For more info on time synchronization, see:

    timedatectl(1), tzselect(8), chronyd(8), chrony.conf(5), and chronyc(1) man pages

    Red Hat Enterprise Linux System Administrator’s Guide at http://docs.redhat.com/


