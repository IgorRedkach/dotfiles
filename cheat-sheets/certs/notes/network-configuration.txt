Module Topics

    Validating Network Configuration

    Configuring Networking

    Network Configuration Files

    Hostnames and Name Resolution


Validating Network Configuration
Displaying IP Addresses

    To show device and address information, use /sbin/ip

    [student@desktop1 ~]$ ip addr show eth0

Displaying Network Performance Statistics

    To show statistics about network performance, use ip with options

    Received (RX) and transmitted (TX) packets, errors, and dropped counters can identify network issues caused by congestion, low memory, and overruns

    [student@desktop1 ~]$ ip -s link show eth0

Displaying Routing Information

    To show routing information, use /sbin/ip route

    [student@desktop1 ~]$ ip route

Testing Connectivity

    To test connectivity, use ping

    ping runs until Ctrl-c unless options limit number of packets sent

    [student@desktop1 ~]$ ping -c3 192.168.0.254

Tracing a Network Path

    To trace path to remote host, use traceroute or tracepath

        Both commands trace path with UDP packets

        Many networks block UDP and ICMP traffic

    traceroute has options to trace path with UDP (default), ICMP (-I), or TCP (-T) packets

        traceroute may not be installed

Each line in tracepath output represents router or hop that packet passes between source and destination

May also include:

    Round-trip timing (RTT)

    Changes in size of maximum transmission unit (MTU)

    Other info, if available

    [student@desktop1 ~]$ tracepath access.redhat.com

Ports and Services

    TCP services use sockets as communication endpoints

        Endpoints comprise IP address, protocol, and port number

    Services typically listen on standard ports; clients on random ports

    Well-known names for standard ports are listed in /etc/services

    To display socket statistics, use ss

        Similar to netstat, which may not be installed

Example: Show all TCP sockets, listening and established

[student@desktop1 ~]$ ss -ta

Options for ss and netstat Commands

    This table shows options available for ss and netstat

-n
Show numbers instead of names for interfaces and ports

-t
Show TCP sockets

-u
Show UDP sockets

-l
Show only listening sockets

-a
Show all sockets (listening and established)

-p
Show processes using the sockets

For more info, see:

    ip-link(8), ip-address(8), ip-route(8), ip(8), ping(8), tracepath(8), traceroute(8), ss(8), and netstat(8) man pages

    Red Hat Enterprise Linux Networking Guide at http://docs.redhat.com/


Configuring Networking
NetworkManager

    NetworkManager is a daemon that monitors and manages network settings

    Includes GNOME notification area for status information

    Communicates via command line and graphical tools

    Configuration files saved in /etc/sysconfig/network-scripts


Connections

    A device is a network interface

    A connection is a device configuration, which consists of settings

    Device can have multiple connections, but only one can be active

        Example: System normally connects to network with settings provided by DHCP

        System needs to connect to lab that uses static networking

        Can store configurations as separate connections

Viewing Network Information

    To display list of all connections, use nmcli con show

    To list only active connections, add --active

    [root@desktop1 ~]# nmcli con show

Viewing Network Details

    To see connection details, specify ID (name)

        Lowercase settings are connection configuration

        Uppercase settings are active data

        [root@desktop1 ~]# nmcli con show "static-eth0"

Viewing Device Status

    To show device status and details, use nmcli dev status

    [root@desktop1 ~]# nmcli dev status

Creating Network Connections With nmcli

    Order of arguments is important

        Common arguments, including type and interface

        Type-specific arguments

        IP address, prefix, and gateway information

    Can specify multiple IP addresses for single device

    After creating connection, define additional settings as modifications

nmcli Syntax: Creating Connections

    Define new connection named "default" that autoconnects as Ethernet connection on eth0 using DHCP

    [root@desktop1 ~]# nmcli con add con-name "default" type ethernet ifname eth0

    Create new connection named "static" and specify IP address and gateway (do not autoconnect)

    [root@desktop1 ~]# nmcli con add con-name "static" ifname eth0 autoconnect no type ethernet ip4 192.168.0.10/24 gw4 192.168.0.254

    Change autoconnect with DHCP at boot to static connection

    [root@desktop1 ~]# nmcli con up "static"

    Change back to DHCP connection

    [root@desktop1 ~]# nmcli con up "default"

        If the static connection is lost, the default connection attempts to autoconnect. To administratively disable an interface and prevent autoconnection, use nmcli dev disconnect DEVICENAME.

ptions vary according to type of connection

Ethernet connection may optionally specify MAC address

Wifi connection must specify SSID and may specify other options

Other connection types include bridge, bond, team, VPN, and VLAN

To view all options, use nmcli con add help

[root@desktop1 ~]# nmcli con add help

Modifying Network Interfaces

    To modify connection, use nmcli con mod with arguments

        Arguments are sets of key/value pairs

        Key includes setting and property names

    To see list of current values for connection, use nmcli con show "<ID>"

    [root@desktop1 ~]# nmcli con show "static"

nmcli Syntax: Modifying Connections

    Turn off autoconnect

    [root@desktop1 ~]# nmcli con mod "static" connection.autoconnect no

    Specify a DNS server

    [root@desktop1 ~]# nmcli con mod "static" ipv4.dns 192.168.0.254

        Some configuration arguments can have values added or removed.

    Add +/- symbol in front of argument, then add secondary DNS server

    [root@desktop1 ~]# nmcli con mod "static" +ipv4.dns 8.8.8.8

    Replace static IP address and gateway

    [root@desktop1 ~]# nmcli con mod "static" ipv4.addresses "192.168.0.10/24 192.168.0.254"

    Add secondary IP address without a gateway

    [root@desktop1 ~]# nmcli con mod "static" +ipv4.addresses 10.10.10.10/16

    

nmcli con mod saves the setting to the configuration files. To activate the changes, activate or reactivate the connection:

[root@desktop1 ~]# nmcli con up "static"

nmcli Command Summary

    Basic device and connection commands for nmcli

nmcli dev status
    

List all devices

nmcli con show
    

List all connections

nmcli con up "<ID>"
    

Activate a connection

nmcli con down "<ID>"
    

Deactivate connection (connection restarts if autoconnect is yes)

nmcli dev dis <DEV>
    

Bring down interface and temporarily disable autoconnect

nmcli net off
    

Disable all managed interfaces

nmcli con add ...
    

Add new connection

nmcli con mod "<ID>" ...
    

Modify connection

nmcli con del "<ID>"
    

Delete connection

    To use graphical interface for nmcli, use `nm-connection-editor

    

For more info on NetworkManager and nmcli, see:

    nmcli(1), nmcli-examples(5), and nm-settings(5) man pages

    Red Hat Enterprise Linux Networking Guide at http://docs.redhat.com/


Network Configuration Files

    Can configure network by editing interface configuration files

        Files control software interfaces for individual network devices

        Usually named /etc/sysconfig/network-scripts/ifcfg-<name>

            <name> is name of device or connection that file controls

    Variables in file used for static and dynamic configuration

ifcfg File Configuration Options

    Static variables for IP address, prefix, and gateway end in a number

        Allows multiple sets of values to be assigned to interface

        DNS variable specifies lookup order for multiple servers

Reloading the ifcfg File

    To make NetworkManager read configuration changes, use nmcli con reload

        Must restart interface for changes to take effect

        [root@server1 ~]# nmcli con reload
        [root@server1 ~]# nmcli con down "System eth0"
        [root@server1 ~]# nmcli con up "System eth0"

Changing the System Hostname

    To display or temporarily modify fully qualified hostname, use hostname

    [root@desktop1 ~]# hostname
    ||desktop1.example.com

    Specify static hostname in /etc/hostname

    To modify /etc/hostname, use hostnamectl

        Also use to view status

    If /etc/hostname does not exist, hostname is set by reverse DNS query after IP address is assigned to interface


Configuring Name Resolution

    Stub resolver converts hostnames to IP addresses, or reverse

        Checks contents of /etc/hosts first

        [root@desktop1 ~]# cat /etc/hosts
        127.0.0.1       localhost localhost.localdomain localhost4 localhost4.localdomain4
        :1             localhost localhost.localdomain localhost6 localhost6.localdomain6

        192.168.0.254 instructor.example.com
        192.168.0.254 content.example.com

    To test hostname resolution with /etc/hosts, use getent hosts hostname

    If no entry is found, stub resolver looks for information from DNS nameserver


Hostnames and Name Resolution
Stub Resolver DNS Query

    /etc/resolv.conf file controls how DNS query is done:

        nameserver: IP address of nameserver to query

            Can have up to three nameserver directives

        search: List of domain names to try with short hostname

            Do not set this and domain in same file

            If they are, last instance wins

            [root@desktop1 ~]# cat /etc/resolv.conf

For more info, see the resolv.conf(5) man page.

Updating /etc/resolv.conf

    NetworkManager uses DNS settings in configuration files to update /etc/resolv.conf

    To modify connections, use nmcli

    [root@desktop1 ~]# nmcli con mod ID ipv4.dns IP
    [root@desktop1 ~]# nmcli con down ID
    [root@desktop1 ~]# nmcli con up ID
    [root@desktop1 ~]# cat /etc/sysconfig/network-scripts/ifcfg-ID

Default behavior of nmcli con mod ID ipv4.dns IP is to replace previous DNS settings with the new IP list provided

To add or remove individual entry, use + or - before ipv4.dns

[root@desktop1 ~]# nmcli con mod ID +ipv4.dns IP

To test DNS server connectivity, use HOSTNAME

[root@desktop1 ~]# host instructor.example.com


    If DHCP is in use as interfaces are started, /etc/resolv.conf is automatically rewritten

    To prevent this, use nmcli to specify PEERDNS=no in configuration files

    [root@desktop1 ~]# nmcli con mod "System eth0" ipv4.ignore-auto-dns yes

    

For more info, see:

    nmcli(1), hostnamectl(1), hosts(5), getent(1), host(1), and resolv.conf(5) man pages


