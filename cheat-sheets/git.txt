
The Three States
-Git has three main states that your files can reside in: 

1. committed
2. modified, 
3. and staged. 

- Committed means that the data is safely stored in your local database. 
- Modified means that you have changed the file but have not committed it to your database yet. 
- Staged means that you have marked a modified file in its current version to go into your next commit snapshot.

The basic Git workflow goes something like this:

1. You modify files in your working directory.

2. You stage the files, adding snapshots of them to your staging area.

3. You do a commit, which takes the files as they are in the staging area and

stores that snapshot permanently to your Git directory.

- The Git directory is where Git stores the metadata and object database for your project
- This is the most important part of Git, and it is what is copied when you clone a repository from another computer.
- 

git config --global user.name "User Name"
git config --global user.email gmail
git config --global core.editor editor
git config --list

/etc/gitconfig
~/.gitconfig

- You can also check what Git thinks a specific key’s value is by typing git

config <key>:

$ git config user.name

Getting Help
$ git help <verb>

$ git <verb> --help

$ man git-<verb>

$ git help config

> Start git
$ git init
$ git add .
$ git add LICENSE
$ git commit -m 'initial project version'

Tracking New Files
$ touch README
$ git add README

- You can tell that it’s staged because it’s under the “Changes to be committed” heading

Staging Modified Files
$ git add <file/dir>

Ignoring Files

$ cat .gitignore

*.[oa] > Ignore files ending with o or a
*~ > Ignore files ending with tilde
- The rules for the patterns you can put in the .gitignore file are as follows:

• Blank lines or lines starting with # are ignored.

• Standard glob patterns work.

• You can start patterns with a forward slash (/) to avoid recursivity.

• You can end patterns with a forward slash (/) to specify a directory.

• You can negate a pattern by starting it with an exclamation point (!).



- To see what you’ve changed but not yet staged, type git diff with no other arguments:
$ git diff

- If you want to see what you’ve staged that will go into your next commit, you

can use git diff --staged

$ git diff --staged

- Alternatively, you can type your commit message inline with the commit

command by specifying it aer a -m flag, like this:

$ git commit -m "Story 182: Fix benchmarks for speed"
$ git commit -a -m "Something"

- With last command, -a flag includes all changed files.

Remove files
$ git rm PROJECTS.md

- To keep files/file on hard drive but not have Git track it anymore, do

$ git rm --cached README

- You can use file-glob patterns with rm
$ git rm log/\*.log

- This command removes all files that have the .log extension in the log/ directory.

$ git rm \*~
- This command removes all files whose names end with a ~.

Moving Files

$ git mv file_from file_to
$ git mv README.md README
$ git status

It's similar to:
$ mv README.md README
$ git rm README.md
$ git add README

Adding new features

Fork it!
Create your feature branch: git checkout -b my-new-feature
Commit your changes: git commit -am 'Add some feature'
Push to the branch: git push origin my-new-feature
Submit a pull request :D
Don’t get discouraged! We estimate that the response time from the maintainers is around: 24 hours.





