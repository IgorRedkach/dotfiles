Install
# yum -y install puppet
- facter package is required by puppet package. No explicit install required

Puppe Manifest
- The effective statements of Puppet manifests are resource declarations.
- Resource delcarations descibe system resources such as users,files and services and their end state
- Resource declaration in a manifest have the following syntax:

    resource_type { 'name':
     param1 => value1,
     param2 => value2,
......
}

- A colon separates the name from the list of resource parameter value assignments.

- The puppet resource command displays Puppet DSL that describes the current state of an object ( or resource) on the local system
- Example,

$ puppet resource file  /root/anaconda-ks.cfg

$ puppet resource user root

- The puppet resource --type command lists the available resource types on a Puppet host.

$ puppet resource --type

- Additional information about the parameters of a resource can be displayed with the 

$ puppet describe file

Using Puppet Manifests

- File ends with a .pp extension with resource declarations inside
- Example of manifest to delete an account with the name kim from the system.

$ vim nokim.pp
    
    user {'kim':
    ensure => absent,
}

$ puppet apply nokim.pp

Create user

$ vim kim.pp

user {'kim':
    ensure => preset,
    uid => 1010,
}

$ puppet apply kim

- The next example manifest, katello-file.pp, declares that a file named /var/tmp/katello-file should exist with right ownership and permissions.

$ vim katello-file.pp

file {'katello-file':
    path => 'var/tmp/katello-file',
    ensure => file,
    mode => 0640,
    owner => 'katello',
    group => 'katello',
    content => "I'm a test file.\n",
}

$ puppet apply katello-file.pp
$ ls /var/tmp/

Identifying system facts

- The Puppet language supports conditional syntax
- Manifests can be written  to use facts about the local host to make decisions
- Puppet uses the facter command to get facts about the local system.
- Without arguments. facter will print a list of all the key/value pairs that describe a system

$ facter | head

- When given a single argument, facter displays the value of the corresponding system fact. Nothing is displayed if invalid fact is specified

$ facter memorysize
$ facter cpuspeed > invalid, no output

- The following manifest has a condition that depends on a system fact:

if $::osfamily == 'redhat' {
  $fpath = '/tmp/example'
}
else {
 $fpath = '/var/tmp/example'
}
file {'example':
 path => $fpath,
 ensure => file,
 mode => 0444,
 owner => 'root',
 group => 'root',
 content => "\nIMPORTANT DATA,\n\n",
}

Ref > facter(8),puppet-apply(8),puppet-describe(8),puppet-resource(8)
$ puppet help

Using Puppet Modules and Classes
- A puppet class defines a named block of Puppet resource definitions for later use. Similar to function
- Puppet class defines all of the resources needed to implement a service or run an application (users,packages,config files,service).
- Puppet classes can be combined into higher-level classes that define a system role, such as FTP server.

Metaparameters for resources that affect Puppet behavior
1. require > specifies that the referenced resource must be put into effect before the current one. Opposite to before

2. before > Indicates that the current resource must be accomplished before the related resource is put into effect. 

- They are both used to define dependencies.

3. notify > When puppet makes changes to this resource. it causes the notified resources to be refreshed ( usually restarting service|)

- Other resources are referenced in this way

Resource_type['objectName']

- The include command is used in a manifest to use a class. Similar to calling a previously defined function in a programming language.
  

Packaging Puppet classes with modules

- Modules are how Puppet finds the classes and types it can use.
- It automatically loads any class or defined type stored in its modules
- These classes are used when they're referenced by name
- Puppet modules are self-contained libraries of Puppet classes that they're typically designed to install,set up,and configure a single piece of software on a system
- Admins can write their own modules:

 https://forge.puppetlabs.com

- A puppet module is a tar archive that contains Puppet  class definitions and additional files and templates used by the classes.

Write a Puppet class called create-kim that will create an administrative user called kim. It should install the SSH public key.

class create-kim {
 
