#!/usr/bin/env bash

# Vm management
# start vm management daemons
vm () {
    dock 
    sudo systemctl restart libvirtd.service
    sudo systemctl restart vsftpd.service
    sudo systemctl restart virtlogd.socket
    sudo mount -o loop ~/iso/CentOS-7-x86_64-Minimal-1611.iso  /srv/http/cent7

}

vm_start () {
    echo ""
    nodes=("$@")
     for node in ${nodes[@]}; do
        sudo virsh start $node
    done
}

vm_restart () {
    echo ""
    nodes=("$@")
    for node in ${nodes[@]}; do
        sudo virsh reboot $node
    done
}

vm_stop () {
    nodes=("$@")
    for node in ${nodes[@]}; do
        sudo virsh shutdown $node
    done
}

vm_shutdown () {
    echo ""
    nodes=("$@")
    for node in ${nodes[@]}; do
        sudo virsh destroy $node
    done
}

vm_destroy () {
    echo ""
    nodes=("$@")
    for node in ${nodes[@]}; do
        sudo virsh destroy $node 2>/dev/null
    done
    for node in ${nodes[@]}; do
        sudo virsh undefine $node 
    done
    sudo virsh pool-refresh default
    for node in ${nodes[@]}; do
        sudo virsh vol-delete --pool default $node.qcow2
    done
}

# Stop all vms running
vm_stopall () {
    for i in `sudo virsh list | grep running | awk '{print $2}'`
    do
        sudo virsh shutdown $i
    done
}

nested () {
echo "options kvm_intel nested=1" | sudo tee /etc/modprobe.d/kvm-nested.conf
sudo modprobe -r kvm_intel && sudo modprobe kvm_intel   # unload and reload kvm module
echo ""
echo "If output is Y, kvm module is loaded"
}

vm_edit () {
sudo EDITOR=vim virsh edit $1
}

vm_mem () {
local domain="$1"
local max_mem="$2"
sudo virsh setmaxmem $domain $max_mem --config
sudo virsh setmem $domain $max_mem --config 
echo ""
virsh dominfo $domain
}

vm_vcpu () {
local domain="$1"
local vcpus="$2"
sudo virsh setvcpus --domain $1 --maximum 2 --config
sudo virsh setvcpus --domain $1 --count 2 --config
virsh dominfo $domain
}



# List all kvm vms
vmlist () {
	sudo virsh list --all
}

# Volume management

vol_list () {
    sudo virsh vol-list --pool default
}
vol_create (){
    sudo virsh vol-create-as default  ${1}.qcow2  ${2}
}

vol_delete () {
    sudo virsh vol-delete ${1}  --pool default
}

vol_attach () {
    sudo virsh attach-disk --domain ${1} --source /var/lib/libvirt/images/${2}.qcow2  --persistent --target ${3}
    # 3 e.g vdb
}

vol_detach () {
    virsh detach-disk --domain ${1} --persistent --live --target ${2}
}

disk_grow () {
    sudo qemu-img resize ${1} +${2}G
}

# Snapshot management

# Create a snaphost or a domaun
snap () {
    while [[ $dom_name == "" || $snap_name == "" ]]; do
        dom_name=${dom_name:-$1}
        snap_name=${snap_name:-$2}
        desc=${desc:-$3}
    done
    echo ""
    sudo virsh snapshot-create-as --domain "$dom_name" \
        --name "$snap_name" \
        --description "$desc"
 }

 # List available snapshots for a domain
 snaplist () {
    sudo virsh snapshot-list --domain "$1" 
 }

 # Display info about a snapshot
 snapinfo () {
     sudo virsh snapshot-info --domain "$1" "$2"
     # $1 domain name
     # $2 snapshot name
 }

 # Restore a snapshot
 snaprestore () {
     sudo virsh shutdown --domain "$1"
     sudo virsh snapshot-revert --domain "$1"  --snapshotname "$2" --running
 }

 # Delete a snapshot
 snapdelete () {
    sudo  virsh snapshot-delete --domain "$1" --snapshotname "$2"
}

# Start CentOS 7 server
server () {
    sudo virsh start server 2>/dev/null
    sleep 30 
    TERM=xterm
    ssh root@server 2>/dev/null
}

# Newtork Management

vm_attach_interface () {
    DOMAIN=${DOMAIN:-"$1"}
    INT_TYPE=${INT_TYPE:-"$2"}
    SOURCE=${SOURCE:-"$3"}

    if [[ $# -eq 0 ]]; then
        echo ""
        echo "USAGE: ${0##*/} <Argument>"
        echo "Arguments:"
        echo -e "\t1\tDomain name"
        echo -e "\t2\tInterface type, e.g bridge,network"
        echo -e "\t3\tInterface source, e.g br1"
    else

    sudo virsh attach-interface --domain $DOMAIN --type $INT_TYPE --source $SOURCE --model virtio --config --live
    sudo virsh domiflist $DOMAIN
fi
}

# VM installer script
installer() {
    local ISO_ DIR="/home/josepy/iso"
    echo -en "Enter vm name: "
    read VM_NAME
    echo -en "Enter memory size: "
    read MEM_SIZE
    echo -en "Enter no of vcpus: "
    read VCPUS
    echo -en "Enter OS type: "
    read OS_TYPE
    echo -en "Enter virtual disk size : "
    read DISK_SIZE
    echo -en "Enter OS Variant e.g (rhel7,ubuntu16.04,debianjessie,wink12): "
    read OS_VARIANT
    echo -en "Enter Graphics type (none,vnc): "
    read GRAPHICS_TYPE
    echo -en "Specify ISO name (rhel7,cent7,deb8,ubuntu16,sles): "
    read ISO_NAME
    case $ISO_NAME in 
        rhel7)
           ISO_FILE="/home/josepy/iso/rhel-server-7.3-x86_64-dvd.iso"
           ;;
        cent7)
           ISO_FILE="/home/josepy/iso/CentOS-7-x86_64-Minimal-1611.iso"
           ;; 
        deb8)
           ISO_FILE="/home/josepy/iso/debian-8.6.0-amd64-CD-1.iso"
           ;; 
        ubuntu16)
           ISO_FILE="/home/josepy/iso/ubuntu-16.04.1-server-amd64.iso"
           ;; 
        sles)
           ISO_FILE="/home/josepy/iso/SLE-12-SP2-Server-DVD-x86_64-GM-DVD1.iso"
           ;; 
   esac

sudo virt-install \
    --name ${VM_NAME} \
    --memory=${MEM_SIZE} \
    --vcpus=${VCPUS} \
    --os-type ${OS_TYPE} \
    --location ${ISO_FILE} \
    --disk size=${DISK_SIZE}  \
    --network bridge=virbr0 --network bridge=docker0 \
    --graphics=${GRAPHICS_TYPE} \
    --hvm \
    --os-variant=${OS_VARIANT}
    #--console pty,target_type=serial \
    #--extra-args 'console=ttyS0,115200n8 serial' \

# List os variants: virt-install --os-variant list, common are:
# rhel7,win2k8,win2k12,win7,opensuse12,ubuntu16.04
# --initrd-inject=/root/ks.cfg --extra-args "ks=file:/ks.cfg"
# --network bridge=br-ex --network bridge=br-ctlplane 
#Live snapsho
# virsh snapshot-create-as --domain undercloud --disk-only --atomic --quiesce
# Take a copy of the (now read-only) QCOW backing file
# rsync --sparse -avh --progress /var/lib/libvirt/images/undercloud.qcow2 1.qcow2
# Merge the QCOW overlay file into the backing file and switch the undercloud VM back to using the original file:
# virsh blockcommit undercloud vda --active --verbose --pivot
}

cent_installer() {
    echo ""
    sudo cp ~/ks.cfg /srv/http/ks.cfg
    # Kickstart update
    echo -en "Enter Hostname: "
    read HOST_NAME
    echo -en "Enter IP Address: "
    read IP_ADDRESS
    HOST_NAME=${HOST_NAME:-$1}
    IP_ADDRESS=${IP_ADDRESS:-$2}
    sudo sed -i 's/server1/'$HOST_NAME'/g' /srv/http/ks.cfg
    sudo sed -i 's/192.168.122.100/'$IP_ADDRESS'/g' /srv/http/ks.cfg

    ## VM configs
    echo ""
    echo -en "Enter vm name: "
    read VM_NAME
    local MEM_SIZE=1024
    local VCPUS=1
    local OS_TYPE="linux"
    echo -en "Enter virtual disk size : "
    read DISK_SIZE
    local OS_VARIANT="rhel7"
    local ISO_FILE="$HOME/iso/CentOS-7-x86_64-Minimal-1611.iso"
    
    VM_NAME=${VM_NAME:-$3}
    DISK_SIZE=${DISK_SIZE:-$4}

sudo virt-install \
    --name ${VM_NAME} \
    --memory=${MEM_SIZE} \
    --vcpus=${VCPUS} \
    --os-type ${OS_TYPE} \
    --location ${ISO_FILE} \
    --disk size=${DISK_SIZE}  \
    --network bridge=virbr0 \
    --graphics=none \
    --os-variant=${OS_VARIANT} \
    --console pty,target_type=serial \
    -x 'console=ttyS0,115200n8 serial' \
    -x "ks=http://192.168.122.1:8090/ks.cfg" 
}

vm_sysprep () {
if [[ $# -eq 0 ]]; then
echo ""
echo "USAGE: ${0##*/} Argument"
echo -e "\t1\tDomain"
echo -e "\t2\tHostname"

else
sudo virt-sysprep  -c qemu:///system -d $1 \
--selinux-relabel --timezone  Africa/Nairobi  \
--root-password  password --no-network  \
--hostname $2 
#-uninstall syslinux,xinetd,tftp-server \
#--update --install  bash-completion,vim,htop,chrony
fi
}

ova2qcow2 () {
tar xvf $1
qemu-img convert -O qcow2 $1 $2
}

vm_clone () {

if [[ $# -eq 0 ]]; then
          echo ""
          echo "USAGE: ${0##*/} <Argument>"
          echo "Arguments:"
          echo -e "\t1\tOriginal domain"
          echo -e "\t2\tTarget domain"
   else

sudo virt-clone --connect qemu:///system \
--original $1 \
--name $2 \
--file /var/lib/libvirt/images/$2.qcow2 \
# sudo virt-sysprep  -d $2
fi
}

vm_net_edit () {
sudo EDITOR=vim virsh net-edit $1
}

vm_mount () {

if [[ $# -eq 0 ]]; then
          echo ""
          echo "USAGE: ${0##*/} <Argument>"
          echo "Arguments:"
          echo -e "\t1\tDomain name"
          echo -e "\t2\tMount Point"
   else
   sudo guestmount -d $1 -o nonempty -i $2
   sudo ls $2
   fi

}

ubuntu_installer () {
sudo virt-install \
--name $1 \
--ram 1024 \
--disk path=/var/lib/libvirt/images/$1.qcow2,size=10 \
--vcpus 1 \
--os-type linux \
--os-variant ubuntu14.04 \
--network bridge=virbr0 \
--graphics vnc \
--console pty,target_type=serial \
--cdrom '/home/josepy/Downloads/ubuntu-14.04.1-server-amd64.iso' \

}
